name: Build FFmpeg From Source

permissions:
  contents: write

on:
  workflow_dispatch:
  workflow_call:

env:
  FFMPEG_TAG: "release/4.4"

jobs:
  ffmpeg:
    runs-on: ${{ matrix.os }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            folder: macos-arm64
            type: build
            install_deps: |
              brew install yasm pkg-config nasm
            cpu_count: "$(sysctl -n hw.logicalcpu)"
            configure_opts: "--arch=arm64"
          - os: macos-latest
            folder: macos-x86_64
            type: download
            download_url: "https://evermeet.cx/ffmpeg/getrelease/zip"
            binary_name: "ffmpeg"
          - os: windows-latest
            folder: windows-x86_64
            type: download
            download_url: "https://www.gyan.dev/ffmpeg/builds/ffmpeg-git-essentials.7z"
            binary_name: "ffmpeg.exe"
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Install build prerequisites
        if: matrix.type == 'build'
        run: |
          echo "Installing build dependencies on $RUNNER_OS..."
          ${{ matrix.install_deps }}

      - name: Clone FFmpeg source
        if: matrix.type == 'build'
        run: |
          git clone --depth 1 --branch "$FFMPEG_TAG" https://git.ffmpeg.org/ffmpeg.git ffmpeg-src

      - name: Configure & build FFmpeg
        if: matrix.type == 'build'
        run: |
          mkdir -p ffmpeg/${{ matrix.folder }}
          cd ffmpeg-src
          ./configure \
            --prefix="${{ github.workspace }}/ffmpeg/${{ matrix.folder }}" \
            --disable-shared \
            --enable-static \
            --disable-doc \
            ${{ matrix.configure_opts }}
          make -j${{ matrix.cpu_count }}
          make install

      - name: Trim macOS ARM64 build
        if: matrix.folder == 'macos-arm64'
        run: |
          rm -rf ffmpeg/${{ matrix.folder }}/include \
                 ffmpeg/${{ matrix.folder }}/lib \
                 ffmpeg/${{ matrix.folder }}/share
          rm -f ffmpeg/${{ matrix.folder }}/bin/ffprobe
          mv ffmpeg/${{ matrix.folder }}/bin/ffmpeg ffmpeg/${{ matrix.folder }}/ffmpeg
          rm -rf ffmpeg/${{ matrix.folder }}/bin

      - name: Download prebuilt FFmpeg for ${{ matrix.folder }}
        if: matrix.type == 'download'
        run: |
          mkdir -p ffmpeg/${{ matrix.folder }}
          cd ffmpeg/${{ matrix.folder }}
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            curl -L "${{ matrix.download_url }}" -o ffmpeg.zip
            unzip -j ffmpeg.zip ffmpeg
            rm ffmpeg.zip
          else
            curl -L "${{ matrix.download_url }}" -o ffmpeg.7z
            7z x ffmpeg.7z -y -o.
            rm ffmpeg.7z
          fi
          chmod +x ${matrix.binary_name}

      # Step: Create or get GitHub release for FFmpeg
      - name: Create or get GitHub release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "ffmpeg ${{ github.ref_name }}"
          body: "Automated build of FFmpeg for ${{ matrix.folder }}"
          draft: false
          prerelease: false

      # Step: Upload FFmpeg binary to the release
      - name: Upload FFmpeg asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ffmpeg/${{ matrix.folder }}/ffmpeg${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          asset_name: ffmpeg-${{ matrix.folder }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          asset_content_type: application/octet-stream