name: Build FFmpeg From Source

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Tag to build and release to'
        required: true
  workflow_call:

env:
  FFMPEG_TAG: "n5.1.4" # The version of FFmpeg to build

jobs:
  create-release:
    name: Create or Verify GitHub Release
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ github.event.inputs.release_tag }}
    steps:
      - name: Ensure GitHub release exists for tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = '${{ github.event.inputs.release_tag }}';
            try {
              // Check if the release already exists
              await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag,
              });
              console.log(`Release for tag ${tag} already exists. Assets will be added to it.`);
            } catch (error) {
              // If not found, create it
              if (error.status === 404) {
                console.log(`Creating new release for tag ${tag}.`);
                await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: tag,
                  name: `Sidecars ${tag}`,
                  body: `Automated build of sidecar binaries.`,
                  draft: false,
                  prerelease: false,
                });
              } else {
                // Re-throw other errors
                throw error;
              }
            }

  build-ffmpeg:
    name: Build FFmpeg
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-14
            folder: macos-arm64
            install_deps: brew install yasm pkg-config nasm
            configure_opts: >-
              --arch=arm64
              --disable-gpl --disable-nonfree
              --disable-ffplay --disable-ffprobe --disable-doc
              --enable-videotoolbox --enable-zlib --enable-iconv
          - os: macos-13
            folder: macos-x86_64
            install_deps: brew install yasm pkg-config nasm lame
            configure_opts: >-
              --arch=x86_64
              --enable-gpl --enable-libmp3lame --disable-nonfree
              --disable-ffplay --disable-ffprobe --disable-doc
              --enable-videotoolbox --enable-zlib --enable-iconv
          - os: windows-latest
            folder: windows-x86_64
            configure_opts: >-
              --target-os=win64 --disable-asm
              --disable-gpl --disable-nonfree
              --disable-ffplay --disable-ffprobe --disable-doc
              --enable-zlib --enable-iconv

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup MSYS2 environment (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            make mingw-w64-x86_64-gcc mingw-w64-x86_64-yasm
            mingw-w64-x86_64-nasm mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-zlib mingw-w64-x86_64-libiconv

      - name: Install build prerequisites (macOS)
        if: runner.os == 'macOS'
        run: ${{ matrix.install_deps }}

      - name: Clone FFmpeg source
        run: git clone --depth 1 --branch "$FFMPEG_TAG" https://git.ffmpeg.org/ffmpeg.git ffmpeg-src

      - name: Configure & build FFmpeg
        shell: ${{ runner.os == 'Windows' && 'msys2 {0}' || 'bash' }}
        run: |
          echo "Configuring and building FFmpeg for ${{ matrix.folder }}"
          CPU_COUNT=$(( ${{ runner.os == 'Windows' }} && nproc || sysctl -n hw.logicalcpu ))
          INSTALL_PREFIX="${{ github.workspace }}/ffmpeg/${{ matrix.folder }}"
          mkdir -p "${INSTALL_PREFIX}"
          cd ffmpeg-src

          BASE_CONFIGURE_FLAGS=(
            --prefix="${INSTALL_PREFIX}"
            --disable-shared
            --enable-static
            --pkg-config-flags="--static"
          )
          
          # Add specific flags for Intel Macs to link libmp3lame
          if [[ "${{ matrix.folder }}" == "macos-x86_64" ]]; then
            export LDFLAGS="-L$(brew --prefix lame)/lib"
            export CPPFLAGS="-I$(brew --prefix lame)/include"
          fi

          ./configure "${BASE_CONFIGURE_FLAGS[@]}" ${{ matrix.configure_opts }}
          
          make -j${CPU_COUNT}
          make install

      - name: Trim and prepare build for release
        shell: ${{ runner.os == 'Windows' && 'msys2 {0}' || 'bash' }}
        run: |
          INSTALL_DIR="${{ github.workspace }}/ffmpeg/${{ matrix.folder }}"
          BINARY_NAME=$(( ${{ runner.os == 'Windows' }} && echo "ffmpeg.exe" || echo "ffmpeg" ))
          
          # Strip the binary to reduce size and move it to the root of the install dir
          strip "${INSTALL_DIR}/bin/${BINARY_NAME}"
          mv "${INSTALL_DIR}/bin/${BINARY_NAME}" "${INSTALL_DIR}/${BINARY_NAME}"
          
          # Clean up unnecessary directories
          rm -rf "${INSTALL_DIR}/bin" "${INSTALL_DIR}/include" "${INSTALL_DIR}/lib" "${INSTALL_DIR}/share" "${INSTALL_DIR}/doc"
          
          echo "Final contents of ${INSTALL_DIR}:"
          ls -R "${INSTALL_DIR}"

      - name: Upload assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd ffmpeg/${{ matrix.folder }}
          if [[ "${{ runner.os }}" == "windows-latest" ]]; then
            BINARY_NAME="ffmpeg.exe"
            ASSET_NAME="ffmpeg-${{ matrix.folder }}.exe"
            # Create checksum and rename it to match the final asset name
            sha256sum $BINARY_NAME | sed "s/$BINARY_NAME/$ASSET_NAME/" > ${ASSET_NAME}.sha256
          else
            BINARY_NAME="ffmpeg"
            ASSET_NAME="ffmpeg-${{ matrix.folder }}"
            # Create checksum and rename it to match the final asset name
            shasum -a 256 $BINARY_NAME | sed "s/$BINARY_NAME/$ASSET_NAME/" > ${ASSET_NAME}.sha256
          fi
          
          # Upload the binary (renaming it on the release) and its checksum file
          gh release upload ${{ needs.create-release.outputs.release_tag }} ${BINARY_NAME}#${ASSET_NAME} --clobber
          gh release upload ${{ needs.create-release.outputs.release_tag }} ${ASSET_NAME}.sha256 --clobber
