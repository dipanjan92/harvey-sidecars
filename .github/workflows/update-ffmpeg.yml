name: Build FFmpeg From Source

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Tag to build'
        required: true
  workflow_call:

env:
  FFMPEG_TAG: "n5.1.4" 

jobs:
  ffmpeg:
    runs-on: ${{ matrix.os }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      MATRIX_FOLDER: ${{ matrix.folder }}
      RELEASE_TAG: ${{ github.event.inputs.release_tag }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-14 # For arm64
            folder: macos-arm64
            type: build
            install_deps: |
              brew install yasm pkg-config nasm # Core build tools for FFmpeg
            configure_opts: >-
              --arch=arm64
              --disable-gpl
              --disable-libmp3lame
              --disable-nonfree
              --disable-ffplay
              --disable-ffprobe
              --disable-doc
              --enable-videotoolbox
              --enable-zlib
              --enable-iconv 
              # --disable-everything and specific enables removed
              # Rely on FFmpeg's default enabled components, respecting above disables

          - os: macos-13 # For x86_64
            folder: macos-x86_64
            type: build
            install_deps: |
              brew install yasm pkg-config nasm lame # Core build tools for FFmpeg
            configure_opts: >-
              --arch=x86_64
              --enable-gpl
              --enable-libmp3lame
              --disable-nonfree
              --disable-ffplay
              --disable-ffprobe
              --disable-doc
              --enable-videotoolbox
              --enable-zlib
              --enable-iconv
              # --disable-everything and specific enables removed

          - os: windows-latest
            folder: windows-x86_64
            type: build
            # No specific install_deps here for libs like openh264, handled by MSYS2 base + FFmpeg internals
            configure_opts: >-
              --target-os=win64
              --disable-asm # Keeping this as it was in your original Windows config
              --disable-gpl
              --disable-nonfree
              --disable-ffplay
              --disable-ffprobe
              --disable-doc
              --enable-zlib
              --enable-iconv
              # --disable-everything and specific enables removed

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Setup MSYS2 environment (Windows)
        if: matrix.os == 'windows-latest' && matrix.type == 'build'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            make
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-yasm
            mingw-w64-x86_64-nasm
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-libiconv

      - name: Install build prerequisites (macOS)
        if: (matrix.os == 'macos-14' || matrix.os == 'macos-13') && matrix.type == 'build'
        run: |
          echo "Installing build dependencies on $RUNNER_OS for ${{ matrix.folder }}..."
          if [[ -n "${{ matrix.install_deps }}" ]]; then
            ${{ matrix.install_deps }}
          else
            echo "No specific install_deps for this macOS job."
          fi

      - name: Clone FFmpeg source
        if: matrix.type == 'build'
        run: |
          echo "Cloning FFmpeg source branch/tag: $FFMPEG_TAG for ${{ matrix.folder }}"
          rm -rf ffmpeg-src # Clean before clone
          git clone --depth 1 --branch "$FFMPEG_TAG" https://git.ffmpeg.org/ffmpeg.git ffmpeg-src

      - name: Configure & build FFmpeg (Windows)
        if: matrix.type == 'build' && matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          echo "Configuring and building FFmpeg for ${{ matrix.folder }} on ${{ matrix.os }}"
          CPU_COUNT=$(nproc)
          echo "Using $CPU_COUNT cores for make"

          INSTALL_PREFIX="${{ github.workspace }}/ffmpeg/${{ matrix.folder }}"
          mkdir -p "${INSTALL_PREFIX}"
          cd ffmpeg-src
          echo "Current directory: $(pwd)"


          BASE_CONFIGURE_FLAGS=(
            --prefix="${INSTALL_PREFIX}"
            --disable-shared
            --enable-static
            --pkg-config-flags="--static"
          )

          echo "Running configure with matrix opts: ${{ matrix.configure_opts }}"
          echo "and base script opts: ${BASE_CONFIGURE_FLAGS[@]}"

          if [[ "${{ matrix.folder }}" == "macos-x86_64" ]]; then
            LDFLAGS="-L$(brew --prefix lame)/lib"
            CPPFLAGS="-I$(brew --prefix lame)/include"
            ./configure "${BASE_CONFIGURE_FLAGS[@]}" ${{ matrix.configure_opts }} --extra-ldflags="$LDFLAGS" --extra-cflags="$CPPFLAGS"
          else
            ./configure "${BASE_CONFIGURE_FLAGS[@]}" ${{ matrix.configure_opts }}
          fi

          make -j${CPU_COUNT}
          make install
          cd ..

      - name: Configure & build FFmpeg (Windows)
        if: matrix.type == 'build' && matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          echo "Configuring and building FFmpeg for ${{ matrix.folder }} on ${{ matrix.os }}"
          CPU_COUNT=$(nproc)
          echo "Using $CPU_COUNT cores for make"

          INSTALL_PREFIX="${{ github.workspace }}/ffmpeg/${{ matrix.folder }}"
          mkdir -p "${INSTALL_PREFIX}"
          cd ffmpeg-src
          echo "Current directory: $(pwd)"

          BASE_CONFIGURE_FLAGS=(
            --prefix="${INSTALL_PREFIX}"
            --disable-shared
            --enable-static
            --pkg-config-flags="--static" 
          )
          
          echo "Running configure with matrix opts: ${{ matrix.configure_opts }}"
          echo "and base script opts: ${BASE_CONFIGURE_FLAGS[@]}"

          ./configure "${BASE_CONFIGURE_FLAGS[@]}" ${{ matrix.configure_opts }}
          
          make -j${CPU_COUNT}
          make install
          cd ..

      - name: Configure & build FFmpeg (macOS)
        if: matrix.type == 'build' && (matrix.os == 'macos-14' || matrix.os == 'macos-13')
        shell: bash
        run: |
          echo "Configuring and building FFmpeg for ${{ matrix.folder }} on ${{ matrix.os }}"
          CPU_COUNT=$(sysctl -n hw.logicalcpu)
          echo "Using $CPU_COUNT cores for make"
          
          INSTALL_PREFIX="${{ github.workspace }}/ffmpeg/${{ matrix.folder }}"
          mkdir -p "${INSTALL_PREFIX}"
          cd ffmpeg-src
          echo "Current directory: $(pwd)"
          
          BASE_CONFIGURE_FLAGS=(
            --prefix="${INSTALL_PREFIX}"
            --disable-shared
            --enable-static
            --pkg-config-flags="--static"
          )
          
          echo "Running configure with matrix opts: ${{ matrix.configure_opts }}"
          echo "and base script opts: ${BASE_CONFIGURE_FLAGS[@]}"

          ./configure "${BASE_CONFIGURE_FLAGS[@]}" ${{ matrix.configure_opts }}
          
          make -j${CPU_COUNT}
          make install
          cd ..

      - name: Trim Build (Windows)
        if: matrix.type == 'build' && matrix.folder == 'windows-x86_64'
        shell: msys2 {0}
        run: |
          echo "Trimming build for ${{ matrix.folder }} on ${{ matrix.os }}"
          INSTALL_DIR="${{ github.workspace }}/ffmpeg/${{ matrix.folder }}"
          FINAL_EXE_NAME="ffmpeg.exe"
          echo "Looking for ffmpeg executable in ${INSTALL_DIR}/bin/"
          ls -l "${INSTALL_DIR}/bin/"
          if [[ -f "${INSTALL_DIR}/bin/${FINAL_EXE_NAME}" ]]; then
            strip "${INSTALL_DIR}/bin/${FINAL_EXE_NAME}"
            mv "${INSTALL_DIR}/bin/${FINAL_EXE_NAME}" "${INSTALL_DIR}/${FINAL_EXE_NAME}"
            echo "Moved and stripped ${FINAL_EXE_NAME} to ${INSTALL_DIR}/"
          else
            echo "Error: ${FINAL_EXE_NAME} not found in ${INSTALL_DIR}/bin/"
            find "${INSTALL_DIR}" -name ${FINAL_EXE_NAME} -print
            exit 1
          fi
          echo "Removing bin, include, lib, share directories from ${INSTALL_DIR}"
          rm -rf "${INSTALL_DIR}/bin" "${INSTALL_DIR}/include" "${INSTALL_DIR}/lib" "${INSTALL_DIR}/share" "${INSTALL_DIR}/doc"
          echo "Contents of ${INSTALL_DIR} after trim:"
          ls -R "${INSTALL_DIR}"

      - name: Trim Build (macOS arm64)
        if: matrix.type == 'build' && matrix.folder == 'macos-arm64'
        run: |
          echo "Trimming build for ${{ matrix.folder }} on ${{ matrix.os }}"
          INSTALL_DIR="${{ github.workspace }}/ffmpeg/${{ matrix.folder }}"
          FINAL_EXE_NAME="ffmpeg"
          echo "Looking for ffmpeg executable in ${INSTALL_DIR}/bin/"
          ls -l "${INSTALL_DIR}/bin/"
          if [[ -f "${INSTALL_DIR}/bin/${FINAL_EXE_NAME}" ]]; then
            strip "${INSTALL_DIR}/bin/${FINAL_EXE_NAME}"
            mv "${INSTALL_DIR}/bin/${FINAL_EXE_NAME}" "${INSTALL_DIR}/${FINAL_EXE_NAME}"
            chmod +x "${INSTALL_DIR}/${FINAL_EXE_NAME}" # Explicitly ensure executable
            echo "Moved, stripped, and ensured executable ${FINAL_EXE_NAME} to ${INSTALL_DIR}/"
          else
            echo "Error: ${FINAL_EXE_NAME} not found in ${INSTALL_DIR}/bin/"
            find "${INSTALL_DIR}" -name ${FINAL_EXE_NAME} -print
            exit 1
          fi
          echo "Removing bin, include, lib, share directories from ${INSTALL_DIR}"
          rm -rf "${INSTALL_DIR}/bin" "${INSTALL_DIR}/include" "${INSTALL_DIR}/lib" "${INSTALL_DIR}/share" "${INSTALL_DIR}/doc"
          echo "Contents of ${INSTALL_DIR} after trim:"
          ls -R "${INSTALL_DIR}"

      - name: Trim Build (macOS x86_64)
        if: matrix.type == 'build' && matrix.folder == 'macos-x86_64'
        run: |
          echo "Trimming build for ${{ matrix.folder }} on ${{ matrix.os }}"
          INSTALL_DIR="${{ github.workspace }}/ffmpeg/${{ matrix.folder }}"
          FINAL_EXE_NAME="ffmpeg"
          echo "Looking for ffmpeg executable in ${INSTALL_DIR}/bin/"
          ls -l "${INSTALL_DIR}/bin/"
          if [[ -f "${INSTALL_DIR}/bin/${FINAL_EXE_NAME}" ]]; then
            strip "${INSTALL_DIR}/bin/${FINAL_EXE_NAME}"
            mv "${INSTALL_DIR}/bin/${FINAL_EXE_NAME}" "${INSTALL_DIR}/${FINAL_EXE_NAME}"
            chmod +x "${INSTALL_DIR}/${FINAL_EXE_NAME}" # Explicitly ensure executable
            echo "Moved, stripped, and ensured executable ${FINAL_EXE_NAME} to ${INSTALL_DIR}/"
          else
            echo "Error: ${FINAL_EXE_NAME} not found in ${INSTALL_DIR}/bin/"
            find "${INSTALL_DIR}" -name ${FINAL_EXE_NAME} -print
            exit 1
          fi
          echo "Removing bin, include, lib, share directories from ${INSTALL_DIR}"
          rm -rf "${INSTALL_DIR}/bin" "${INSTALL_DIR}/include" "${INSTALL_DIR}/lib" "${INSTALL_DIR}/share" "${INSTALL_DIR}/doc"
          echo "Contents of ${INSTALL_DIR} after trim:"
          ls -R "${INSTALL_DIR}"
      
      - name: Download prebuilt FFmpeg for ${{ matrix.folder }}
        if: matrix.type == 'download' 
        run: |
          # This section is currently not used by the matrix
          echo "Matrix type is not 'download', skipping prebuilt download."
          # ... (original download script can remain here if you plan to use it later) ...

      - name: Ensure GitHub release
        id: ensure_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const tag = process.env.RELEASE_TAG;
            try {
              const rel = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag
              });
              console.log(`Found existing release for tag ${tag}`);
              return rel.data.upload_url;
            } catch (e) {
              if (e.status === 404) {
                console.warn(`Release ${tag} not found, creating it.`);
                const rel = await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: tag,
                  name: `FFmpeg Sidecars ${tag}`,
                  body: `Automated build of FFmpeg sidecars. Release tag: ${tag}. Commit: ${context.sha}`,
                  draft: false,
                  prerelease: false
                });
                console.log(`Created new release for tag ${tag}`);
                return rel.data.upload_url;
              } else {
                console.error(`Error checking release: ${e.message}`);
                throw e;
              }
            }

      - name: Upload FFmpeg asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.ensure_release.outputs.result }}
          asset_path: ffmpeg/${{ matrix.folder }}/ffmpeg${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          asset_name: ffmpeg-${{ matrix.folder }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          asset_content_type: application/octet-stream

      - name: Calculate and upload checksum
        run: |
          cd ffmpeg/${{ matrix.folder }}
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            BINARY_NAME="ffmpeg.exe"
            ASSET_NAME="ffmpeg-${{ matrix.folder }}.exe"
            sha256sum $BINARY_NAME | sed "s/$BINARY_NAME/$ASSET_NAME/" > ${ASSET_NAME}.sha256
          else
            BINARY_NAME="ffmpeg"
            ASSET_NAME="ffmpeg-${{ matrix.folder }}"
            shasum -a 256 $BINARY_NAME | sed "s/$BINARY_NAME/$ASSET_NAME/" > ${ASSET_NAME}.sha256
          fi
      - name: Upload checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.ensure_release.outputs.result }}
          asset_path: ffmpeg/${{ matrix.folder }}/ffmpeg-${{ matrix.folder }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}.sha256
          asset_name: ffmpeg-${{ matrix.folder }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}.sha256
          asset_content_type: text/plain
