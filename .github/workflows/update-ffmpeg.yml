name: Build FFmpeg From Source

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Tag to build'
        required: true
  workflow_call:

env:
  FFMPEG_TAG: "n5.1.4" # Using FFmpeg 5.1.4

jobs:
  ffmpeg:
    runs-on: ${{ matrix.os }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      MATRIX_FOLDER: ${{ matrix.folder }}
      RELEASE_TAG: ${{ github.event.inputs.release_tag }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest # For arm64
            folder: macos-arm64
            type: build
            install_deps: |
              brew install yasm pkg-config nasm openh264 libvorbis
            configure_opts: >-
              --arch=arm64
              --disable-gpl
              --disable-nonfree
              --disable-ffplay
              --disable-ffprobe
              --disable-doc
              --disable-everything
              --disable-network
              --disable-bzlib
              --disable-lzma
              --disable-schannel
              --disable-sdl2
              --disable-securetransport
              --disable-xlib
              --enable-zlib
              --enable-iconv
              --enable-protocol=file,pipe
              --enable-filter=aresample,aformat,format,scale,crop,apad,atrim,trim,setpts,asetpts,volume,anullsink,nullsink
              --enable-demuxer=aac,ac3,aiff,amr,ape,asf,avi,caf,dts,dv,flac,flv,gif,h264,h265,hevc,iff,m4v,matroska,mjpeg,mov,mp3,mpc,mpegps,mpegts,mpegvideo,ogg,pcm_alaw,pcm_f32be,pcm_f32le,pcm_f64be,pcm_f64le,pcm_mulaw,pcm_s16be,pcm_s16le,pcm_s24be,pcm_s24le,pcm_s32be,pcm_s32le,pcm_s8,pcm_u16be,pcm_u16le,pcm_u24be,pcm_u24le,pcm_u32be,pcm_u32le,pcm_u8,rm,swf,tta,voc,wav,webm,wsaud,wtv,wv,xa
              --enable-muxer=wav,mp4,matroska,adts,flac,ogg,mp3
              --enable-decoder=aac,aac_latm,ac3,alac,amrnb,amrwb,ape,atrac3,cook,dca,eac3,flac,g722,g726,gsm,mp1,mp2,mp3,mpc7,mpc8,nellymoser,opus,pcm_alaw,pcm_f32be,pcm_f32le,pcm_f64be,pcm_f64le,pcm_mulaw,pcm_s16be,pcm_s16le,pcm_s16le_planar,pcm_s24be,pcm_s24le,pcm_s32be,pcm_s32le,pcm_s8,pcm_u16be,pcm_u16le,pcm_u24be,pcm_u24le,pcm_u32be,pcm_u32le,pcm_u8,ra_144,ra_288,ralf,shorten,sonic,tta,vorbis,wmapro,wmav1,wmav2,wmavoice
              --enable-decoder=h261,h263,h263p,h264,hevc,mjpeg,mpeg1video,mpeg2video,mpeg4,msmpeg4v1,msmpeg4v2,msmpeg4v3,png,rv10,rv20,rv30,rv40,svq1,theora,vp6,vp6a,vp6f,vp8,vp9,wmv1,wmv2,wmv3,gif
              --enable-encoder=pcm_s16le,aac,flac,libvorbis,mpeg4,libopenh264,mjpeg,gif,png
              --enable-parser=aac,ac3,dca,flac,h264,hevc,mjpeg,mpegvideo,mpeg4video,opus,vp3,vp8,vp9,vorbis
              --enable-libopenh264
              --enable-libvorbis
              --enable-videotoolbox

          - os: macos-13 # For x86_64
            folder: macos-x86_64
            type: build
            install_deps: |
              brew install yasm pkg-config nasm openh264 libvorbis
            configure_opts: >-
              --arch=x86_64
              --disable-gpl
              --disable-nonfree
              --disable-ffplay
              --disable-ffprobe
              --disable-doc
              --disable-everything
              --disable-network
              --disable-bzlib
              --disable-lzma
              --disable-schannel
              --disable-sdl2
              --disable-securetransport
              --disable-xlib
              --enable-zlib
              --enable-iconv
              --enable-protocol=file,pipe
              --enable-filter=aresample,aformat,format,scale,crop,apad,atrim,trim,setpts,asetpts,volume,anullsink,nullsink
              --enable-demuxer=aac,ac3,aiff,amr,ape,asf,avi,caf,dts,dv,flac,flv,gif,h264,h265,hevc,iff,m4v,matroska,mjpeg,mov,mp3,mpc,mpegps,mpegts,mpegvideo,ogg,pcm_alaw,pcm_f32be,pcm_f32le,pcm_f64be,pcm_f64le,pcm_mulaw,pcm_s16be,pcm_s16le,pcm_s24be,pcm_s24le,pcm_s32be,pcm_s32le,pcm_s8,pcm_u16be,pcm_u16le,pcm_u24be,pcm_u24le,pcm_u32be,pcm_u32le,pcm_u8,rm,swf,tta,voc,wav,webm,wsaud,wtv,wv,xa
              --enable-muxer=wav,mp4,matroska,adts,flac,ogg,mp3
              --enable-decoder=aac,aac_latm,ac3,alac,amrnb,amrwb,ape,atrac3,cook,dca,eac3,flac,g722,g726,gsm,mp1,mp2,mp3,mpc7,mpc8,nellymoser,opus,pcm_alaw,pcm_f32be,pcm_f32le,pcm_f64be,pcm_f64le,pcm_mulaw,pcm_s16be,pcm_s16le,pcm_s16le_planar,pcm_s24be,pcm_s24le,pcm_s32be,pcm_s32le,pcm_s8,pcm_u16be,pcm_u16le,pcm_u24be,pcm_u24le,pcm_u32be,pcm_u32le,pcm_u8,ra_144,ra_288,ralf,shorten,sonic,tta,vorbis,wmapro,wmav1,wmav2,wmavoice
              --enable-decoder=h261,h263,h263p,h264,hevc,mjpeg,mpeg1video,mpeg2video,mpeg4,msmpeg4v1,msmpeg4v2,msmpeg4v3,png,rv10,rv20,rv30,rv40,svq1,theora,vp6,vp6a,vp6f,vp8,vp9,wmv1,wmv2,wmv3,gif
              --enable-encoder=pcm_s16le,aac,flac,libvorbis,mpeg4,libopenh264,mjpeg,gif,png
              --enable-parser=aac,ac3,dca,flac,h264,hevc,mjpeg,mpegvideo,mpeg4video,opus,vp3,vp8,vp9,vorbis
              --enable-libopenh264
              --enable-libvorbis
              --enable-videotoolbox

          - os: windows-latest
            folder: windows-x86_64
            type: build
            # No specific install_deps here as MSYS2 handles it in a later step
            configure_opts: >-
              --target-os=win64
              --disable-asm
              --disable-gpl
              --disable-nonfree
              --disable-ffplay
              --disable-ffprobe
              --disable-doc
              --disable-everything
              --disable-network
              --disable-bzlib
              --disable-lzma
              --disable-schannel
              --disable-sdl2
              --disable-securetransport
              --disable-xlib
              --enable-zlib
              --enable-iconv
              --enable-protocol=file,pipe
              --enable-filter=aresample,aformat,format,scale,crop,apad,atrim,trim,setpts,asetpts,volume,anullsink,nullsink
              --enable-demuxer=aac,ac3,aiff,amr,ape,asf,avi,caf,dts,dv,flac,flv,gif,h264,h265,hevc,iff,m4v,matroska,mjpeg,mov,mp3,mpc,mpegps,mpegts,mpegvideo,ogg,pcm_alaw,pcm_f32be,pcm_f32le,pcm_f64be,pcm_f64le,pcm_mulaw,pcm_s16be,pcm_s16le,pcm_s24be,pcm_s24le,pcm_s32be,pcm_s32le,pcm_s8,pcm_u16be,pcm_u16le,pcm_u24be,pcm_u24le,pcm_u32be,pcm_u32le,pcm_u8,rm,swf,tta,voc,wav,webm,wsaud,wtv,wv,xa
              --enable-muxer=wav,mp4,matroska,adts,flac,ogg,mp3
              --enable-decoder=aac,aac_latm,ac3,alac,amrnb,amrwb,ape,atrac3,cook,dca,eac3,flac,g722,g726,gsm,mp1,mp2,mp3,mpc7,mpc8,nellymoser,opus,pcm_alaw,pcm_f32be,pcm_f32le,pcm_f64be,pcm_f64le,pcm_mulaw,pcm_s16be,pcm_s16le,pcm_s16le_planar,pcm_s24be,pcm_s24le,pcm_s32be,pcm_s32le,pcm_s8,pcm_u16be,pcm_u16le,pcm_u24be,pcm_u24le,pcm_u32be,pcm_u32le,pcm_u8,ra_144,ra_288,ralf,shorten,sonic,tta,vorbis,wmapro,wmav1,wmav2,wmavoice
              --enable-decoder=h261,h263,h263p,h264,hevc,mjpeg,mpeg1video,mpeg2video,mpeg4,msmpeg4v1,msmpeg4v2,msmpeg4v3,png,rv10,rv20,rv30,rv40,svq1,theora,vp6,vp6a,vp6f,vp8,vp9,wmv1,wmv2,wmv3,gif
              --enable-encoder=pcm_s16le,aac,flac,libvorbis,mpeg4,libopenh264,mjpeg,gif,png
              --enable-parser=aac,ac3,dca,flac,h264,hevc,mjpeg,mpegvideo,mpeg4video,opus,vp3,vp8,vp9,vorbis
              --enable-libopenh264
              --enable-libvorbis
              # Note: VideoToolbox is macOS specific. MediaFoundation could be added for Windows if desired via --enable-mediafoundation but requires setup.

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Setup MSYS2 environment (Windows)
        if: matrix.os == 'windows-latest' && matrix.type == 'build'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            make
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-yasm
            mingw-w64-x86_64-nasm
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-openh264
            mingw-w64-x86_64-libvorbis
            mingw-w64-x86_64-zlib 
            mingw-w64-x86_64-libiconv

      - name: Install build prerequisites (macOS)
        if: (matrix.os == 'macos-latest' || matrix.os == 'macos-13') && matrix.type == 'build'
        run: |
          echo "Installing build dependencies on $RUNNER_OS for ${{ matrix.folder }}..."
          if [[ -n "${{ matrix.install_deps }}" ]]; then
            ${{ matrix.install_deps }}
          else
            echo "No specific install_deps for this macOS job."
          fi

      - name: Clone FFmpeg source
        if: matrix.type == 'build'
        run: |
          echo "Cloning FFmpeg source branch/tag: $FFMPEG_TAG for ${{ matrix.folder }}"
          rm -rf ffmpeg-src # Clean before clone
          git clone --depth 1 --branch "$FFMPEG_TAG" https://git.ffmpeg.org/ffmpeg.git ffmpeg-src

      - name: Configure & build FFmpeg (Windows)
        if: matrix.type == 'build' && matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          echo "Configuring and building FFmpeg for ${{ matrix.folder }} on ${{ matrix.os }}"
          CPU_COUNT=$(nproc)
          echo "Using $CPU_COUNT cores for make"
          
          INSTALL_PREFIX="${{ github.workspace }}/ffmpeg/${{ matrix.folder }}"
          mkdir -p "${INSTALL_PREFIX}"
          cd ffmpeg-src
          echo "Current directory: $(pwd)"
          
          # Base configure flags that are common for this script's logic
          BASE_CONFIGURE_FLAGS=(
            --prefix="${INSTALL_PREFIX}"
            --disable-shared
            --enable-static
            --pkg-config-flags="--static" 
          )
          
          # Matrix specific configure options (contains the long list of enables/disables)
          # These are already formatted as a single string with spaces in the matrix.
          # We need to be careful how these are passed if they contain spaces themselves,
          # but FFmpeg configure options are typically space-separated.
          
          echo "Running configure with matrix opts: ${{ matrix.configure_opts }}"
          echo "and base script opts: ${BASE_CONFIGURE_FLAGS[@]}"

          # Simply append the matrix.configure_opts string
          # The shell will split it by spaces.
          # Ensure matrix.configure_opts itself doesn't have complex quoting issues for this.
          # The provided matrix.configure_opts is a multi-line string which YAML converts to a single string with newlines replaced by spaces.
          # This should be fine for configure scripts that expect space-separated options.
          ./configure "${BASE_CONFIGURE_FLAGS[@]}" ${{ matrix.configure_opts }}
          
          make -j${CPU_COUNT}
          make install
          cd ..

      - name: Configure & build FFmpeg (macOS)
        if: matrix.type == 'build' && (matrix.os == 'macos-latest' || matrix.os == 'macos-13')
        shell: bash
        run: |
          echo "Configuring and building FFmpeg for ${{ matrix.folder }} on ${{ matrix.os }}"
          CPU_COUNT=$(sysctl -n hw.logicalcpu)
          echo "Using $CPU_COUNT cores for make"
          
          INSTALL_PREFIX="${{ github.workspace }}/ffmpeg/${{ matrix.folder }}"
          mkdir -p "${INSTALL_PREFIX}"
          cd ffmpeg-src
          echo "Current directory: $(pwd)"
          
          BASE_CONFIGURE_FLAGS=(
            --prefix="${INSTALL_PREFIX}"
            --disable-shared
            --enable-static
            --pkg-config-flags="--static"
          )
          
          echo "Running configure with matrix opts: ${{ matrix.configure_opts }}"
          echo "and base script opts: ${BASE_CONFIGURE_FLAGS[@]}"

          ./configure "${BASE_CONFIGURE_FLAGS[@]}" ${{ matrix.configure_opts }}
          
          make -j${CPU_COUNT}
          make install
          cd ..

      - name: Trim Build (Windows)
        if: matrix.type == 'build' && matrix.folder == 'windows-x86_64'
        shell: msys2 {0}
        run: |
          echo "Trimming build for ${{ matrix.folder }} on ${{ matrix.os }}"
          INSTALL_DIR="${{ github.workspace }}/ffmpeg/${{ matrix.folder }}"
          FINAL_EXE_NAME="ffmpeg.exe"
          echo "Looking for ffmpeg executable in ${INSTALL_DIR}/bin/"
          ls -l "${INSTALL_DIR}/bin/"
          if [[ -f "${INSTALL_DIR}/bin/${FINAL_EXE_NAME}" ]]; then
            # Optionally strip the binary on Windows too
            strip "${INSTALL_DIR}/bin/${FINAL_EXE_NAME}"
            mv "${INSTALL_DIR}/bin/${FINAL_EXE_NAME}" "${INSTALL_DIR}/${FINAL_EXE_NAME}"
            echo "Moved and stripped ${FINAL_EXE_NAME} to ${INSTALL_DIR}/"
          else
            echo "Error: ${FINAL_EXE_NAME} not found in ${INSTALL_DIR}/bin/"
            find "${INSTALL_DIR}" -name ${FINAL_EXE_NAME} -print
            exit 1
          fi
          echo "Removing bin, include, lib, share directories from ${INSTALL_DIR}"
          rm -rf "${INSTALL_DIR}/bin" "${INSTALL_DIR}/include" "${INSTALL_DIR}/lib" "${INSTALL_DIR}/share" "${INSTALL_DIR}/doc"
          echo "Contents of ${INSTALL_DIR} after trim:"
          ls -R "${INSTALL_DIR}"

      - name: Trim Build (macOS arm64)
        if: matrix.type == 'build' && matrix.folder == 'macos-arm64'
        run: |
          echo "Trimming build for ${{ matrix.folder }} on ${{ matrix.os }}"
          INSTALL_DIR="${{ github.workspace }}/ffmpeg/${{ matrix.folder }}"
          FINAL_EXE_NAME="ffmpeg"
          echo "Looking for ffmpeg executable in ${INSTALL_DIR}/bin/"
          ls -l "${INSTALL_DIR}/bin/"
          if [[ -f "${INSTALL_DIR}/bin/${FINAL_EXE_NAME}" ]]; then
            strip "${INSTALL_DIR}/bin/${FINAL_EXE_NAME}"
            mv "${INSTALL_DIR}/bin/${FINAL_EXE_NAME}" "${INSTALL_DIR}/${FINAL_EXE_NAME}"
            echo "Moved and stripped ${FINAL_EXE_NAME} to ${INSTALL_DIR}/"
          else
            echo "Error: ${FINAL_EXE_NAME} not found in ${INSTALL_DIR}/bin/"
            find "${INSTALL_DIR}" -name ${FINAL_EXE_NAME} -print
            exit 1
          fi
          echo "Removing bin, include, lib, share directories from ${INSTALL_DIR}"
          rm -rf "${INSTALL_DIR}/bin" "${INSTALL_DIR}/include" "${INSTALL_DIR}/lib" "${INSTALL_DIR}/share" "${INSTALL_DIR}/doc"
          echo "Contents of ${INSTALL_DIR} after trim:"
          ls -R "${INSTALL_DIR}"

      - name: Trim Build (macOS x86_64)
        if: matrix.type == 'build' && matrix.folder == 'macos-x86_64'
        run: |
          echo "Trimming build for ${{ matrix.folder }} on ${{ matrix.os }}"
          INSTALL_DIR="${{ github.workspace }}/ffmpeg/${{ matrix.folder }}"
          FINAL_EXE_NAME="ffmpeg"
          echo "Looking for ffmpeg executable in ${INSTALL_DIR}/bin/"
          ls -l "${INSTALL_DIR}/bin/"
          if [[ -f "${INSTALL_DIR}/bin/${FINAL_EXE_NAME}" ]]; then
            strip "${INSTALL_DIR}/bin/${FINAL_EXE_NAME}"
            mv "${INSTALL_DIR}/bin/${FINAL_EXE_NAME}" "${INSTALL_DIR}/${FINAL_EXE_NAME}"
            echo "Moved and stripped ${FINAL_EXE_NAME} to ${INSTALL_DIR}/"
          else
            echo "Error: ${FINAL_EXE_NAME} not found in ${INSTALL_DIR}/bin/"
            find "${INSTALL_DIR}" -name ${FINAL_EXE_NAME} -print
            exit 1
          fi
          echo "Removing bin, include, lib, share directories from ${INSTALL_DIR}"
          rm -rf "${INSTALL_DIR}/bin" "${INSTALL_DIR}/include" "${INSTALL_DIR}/lib" "${INSTALL_DIR}/share" "${INSTALL_DIR}/doc"
          echo "Contents of ${INSTALL_DIR} after trim:"
          ls -R "${INSTALL_DIR}"
      
      - name: Download prebuilt FFmpeg for ${{ matrix.folder }}
        if: matrix.type == 'download' # This section will not run with current matrix
        run: |
          # ... (content unchanged, will not run) ...
          mkdir -p ffmpeg/${{ matrix.folder }}
          cd ffmpeg/${{ matrix.folder }}
          if [[ "${{ matrix.os }}" == "macos-latest" || "${{ matrix.os }}" == "macos-13" ]]; then 
            curl -L "${{ matrix.download_url }}" -o ffmpeg.zip
            unzip -j ffmpeg.zip ffmpeg # Assuming ffmpeg is directly in zip for macos prebuilts
            rm ffmpeg.zip
          else # Assuming windows-latest
            curl -L "${{ matrix.download_url }}" -o ffmpeg.7z
            # Ensure 7z is available. setup-msys2 might provide it, or add '7zip' to msys2 install
            7z x ffmpeg.7z -y 
            rm ffmpeg.7z
            # The following find assumes a nested structure common in Windows FFmpeg builds
            EXE_PATH=$(find . -path "*/bin/ffmpeg.exe" -print -quit || find . -name "ffmpeg.exe" -print -quit)
            if [[ -n "$EXE_PATH" ]]; then
              mv "$EXE_PATH" "ffmpeg.exe"
              chmod +x "ffmpeg.exe"
            else
              echo "ffmpeg.exe not found in archive"
              exit 1
            fi
          fi

      - name: Ensure GitHub release
        id: ensure_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const tag = process.env.RELEASE_TAG;
            try {
              const rel = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag
              });
              console.log(`Found existing release for tag ${tag}`);
              return rel.data.upload_url;
            } catch (e) {
              if (e.status === 404) {
                console.warn(`Release ${tag} not found, creating it.`);
                const rel = await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: tag,
                  name: `FFmpeg Sidecars ${tag}`, // Simplified name
                  body: `Automated build of FFmpeg sidecars. Release tag: ${tag}. Commit: ${context.sha}`,
                  draft: false,
                  prerelease: false
                });
                console.log(`Created new release for tag ${tag}`);
                return rel.data.upload_url;
              } else {
                console.error(`Error checking release: ${e.message}`);
                throw e;
              }
            }

      - name: Upload FFmpeg asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.ensure_release.outputs.result }}
          asset_path: ffmpeg/${{ matrix.folder }}/ffmpeg${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          asset_name: ffmpeg-${{ matrix.folder }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          asset_content_type: application/octet-stream
