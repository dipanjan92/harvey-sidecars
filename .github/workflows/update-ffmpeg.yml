name: Build FFmpeg From Source

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Tag to build'
        required: true
  workflow_call:

env:
  FFMPEG_TAG: "release/4.4" # Consider using a more recent release if compatible

jobs:
  ffmpeg:
    runs-on: ${{ matrix.os }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      MATRIX_FOLDER: ${{ matrix.folder }}
      RELEASE_TAG: ${{ github.event.inputs.release_tag }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            folder: macos-arm64
            type: build
            install_deps: |
              brew install yasm pkg-config nasm
            configure_opts: "--arch=arm64 --disable-programs=ffplay,ffprobe --enable-protocol=file"
          - os: macos-latest
            folder: macos-x86_64
            type: build
            install_deps: |
              brew install yasm pkg-config nasm
            configure_opts: "--arch=x86_64 --disable-gpl --disable-programs=ffplay,ffprobe --enable-protocol=file"
          - os: windows-latest
            folder: windows-x86_64
            type: build
            configure_opts: "--disable-gpl --target-os=win64 --disable-programs=ffplay,ffprobe --enable-protocol=file"
    defaults:
      run:
        shell: bash # Default shell for most steps
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Setup MSYS2 environment (Windows)
        if: matrix.os == 'windows-latest' && matrix.type == 'build'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            make
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-yasm
            mingw-w64-x86_64-nasm
            mingw-w64-x86_64-pkg-config

      - name: Install build prerequisites (macOS)
        if: matrix.os == 'macos-latest' && matrix.type == 'build' && matrix.install_deps != ''
        run: |
          echo "Installing build dependencies on $RUNNER_OS..."
          ${{ matrix.install_deps }}

      - name: Clone FFmpeg source
        if: matrix.type == 'build'
        run: |
          echo "Cloning FFmpeg source branch/tag: $FFMPEG_TAG"
          git clone --depth 1 --branch "$FFMPEG_TAG" https://git.ffmpeg.org/ffmpeg.git ffmpeg-src

      # ---- Configure & build FFmpeg (Windows) ----
      - name: Configure & build FFmpeg (Windows)
        if: matrix.type == 'build' && matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          echo "Configuring and building FFmpeg for ${{ matrix.folder }} on ${{ matrix.os }}"
          CPU_COUNT=$(nproc)
          echo "Using $CPU_COUNT cores for make"
          mkdir -p ffmpeg/${{ matrix.folder }}
          cd ffmpeg-src
          echo "Current directory: $(pwd)"
          echo "Running configure with opts: ${{ matrix.configure_opts }}"
          ./configure             --prefix="${{ github.workspace }}/ffmpeg/${{ matrix.folder }}"             --disable-shared             --enable-static             --disable-doc             ${{ matrix.configure_opts }}
          make -j${CPU_COUNT}
          make install
          cd ..

      # ---- Configure & build FFmpeg (macOS) ----
      - name: Configure & build FFmpeg (macOS)
        if: matrix.type == 'build' && matrix.os == 'macos-latest'
        # shell: bash # Implicitly uses default bash from defaults.run.shell
        run: |
          echo "Configuring and building FFmpeg for ${{ matrix.folder }} on ${{ matrix.os }}"
          CPU_COUNT=$(nproc)
          echo "Using $CPU_COUNT cores for make"
          mkdir -p ffmpeg/${{ matrix.folder }}
          cd ffmpeg-src
          echo "Current directory: $(pwd)"
          echo "Running configure with opts: ${{ matrix.configure_opts }}"
          ./configure             --prefix="${{ github.workspace }}/ffmpeg/${{ matrix.folder }}"             --disable-shared             --enable-static             --disable-doc             ${{ matrix.configure_opts }}
          make -j${CPU_COUNT}
          make install
          cd ..

      # ---- Trim Build (Windows) ----
      - name: Trim Build (Windows)
        if: matrix.type == 'build' && matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          echo "Trimming build for ${{ matrix.folder }} on ${{ matrix.os }}"
          INSTALL_DIR="${{ github.workspace }}/ffmpeg/${{ matrix.folder }}"
          FINAL_EXE_NAME="ffmpeg.exe"

          echo "Looking for ffmpeg executable in ${INSTALL_DIR}/bin/"
          ls -l "${INSTALL_DIR}/bin/"
          if [[ -f "${INSTALL_DIR}/bin/${FINAL_EXE_NAME}" ]]; then
            mv "${INSTALL_DIR}/bin/${FINAL_EXE_NAME}" "${INSTALL_DIR}/${FINAL_EXE_NAME}"
            echo "Moved ${FINAL_EXE_NAME} to ${INSTALL_DIR}/"
          else
            echo "Error: ${FINAL_EXE_NAME} not found in ${INSTALL_DIR}/bin/"
            echo "Listing contents of ${INSTALL_DIR}/bin and its subdirectories..."
            find "${INSTALL_DIR}/bin" -type f \( -name ffmpeg -o -name ffmpeg.exe \) -print
            exit 1
          fi

          echo "Removing bin, include, lib, share directories from ${INSTALL_DIR}"
          rm -rf "${INSTALL_DIR}/bin"                  "${INSTALL_DIR}/include"                  "${INSTALL_DIR}/lib"                  "${INSTALL_DIR}/share"                  "${INSTALL_DIR}/doc"
          echo "Contents of ${INSTALL_DIR} after trim:"
          ls -R "${INSTALL_DIR}"

      # ---- Trim Build (macOS) ----
      - name: Trim Build (macOS)
        if: matrix.type == 'build' && matrix.os == 'macos-latest'
        # shell: bash # Implicitly uses default bash
        run: |
          echo "Trimming build for ${{ matrix.folder }} on ${{ matrix.os }}"
          INSTALL_DIR="${{ github.workspace }}/ffmpeg/${{ matrix.folder }}"
          FINAL_EXE_NAME="ffmpeg"

          echo "Looking for ffmpeg executable in ${INSTALL_DIR}/bin/"
          ls -l "${INSTALL_DIR}/bin/"
          if [[ -f "${INSTALL_DIR}/bin/${FINAL_EXE_NAME}" ]]; then
            mv "${INSTALL_DIR}/bin/${FINAL_EXE_NAME}" "${INSTALL_DIR}/${FINAL_EXE_NAME}"
            echo "Moved ${FINAL_EXE_NAME} to ${INSTALL_DIR}/"
          else
            echo "Error: ${FINAL_EXE_NAME} not found in ${INSTALL_DIR}/bin/"
            echo "Listing contents of ${INSTALL_DIR}/bin and its subdirectories..."
            find "${INSTALL_DIR}/bin" -type f \( -name ffmpeg -o -name ffmpeg.exe \) -print
            exit 1
          fi

          echo "Removing bin, include, lib, share directories from ${INSTALL_DIR}"
          rm -rf "${INSTALL_DIR}/bin"                  "${INSTALL_DIR}/include"                  "${INSTALL_DIR}/lib"                  "${INSTALL_DIR}/share"                  "${INSTALL_DIR}/doc"
          echo "Contents of ${INSTALL_DIR} after trim:"
          ls -R "${INSTALL_DIR}"

      # This step will be skipped as all types are 'build'
      - name: Download prebuilt FFmpeg for ${{ matrix.folder }}
        if: matrix.type == 'download'
        run: |
          # ... (content unchanged, will not run) ...
          mkdir -p ffmpeg/${{ matrix.folder }}
          cd ffmpeg/${{ matrix.folder }}
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            curl -L "${{ matrix.download_url }}" -o ffmpeg.zip
            unzip -j ffmpeg.zip ffmpeg
            rm ffmpeg.zip
          else # Assumed windows
            curl -L "${{ matrix.download_url }}" -o ffmpeg.7z
            7z x ffmpeg.7z -y
            rm ffmpeg.7z
            EXE_PATH=$(find . -type f -name "${{ matrix.binary_name }}" | head -n1)
            mv "$EXE_PATH" "${{ matrix.binary_name }}"
            chmod +x "${{ matrix.binary_name }}"
          fi

      - name: Ensure GitHub release
        id: ensure_release
        # ... (content unchanged) ...
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const tag = process.env.RELEASE_TAG;
            try {
              const rel = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag
              });
              return rel.data.upload_url;
            } catch (e) {
              console.warn(`Release ${tag} not found, creating it.`);
              const rel = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag,
                name: `harvey-sidecars ${tag}`,
                body: `Automated build of FFmpeg, Whisper.cpp, Diarize-CLI for Harvey App. Release tag: ${tag}. Commit: ${context.sha}`,
                draft: false,
                prerelease: false
              });
              return rel.data.upload_url;
            }

      - name: Upload FFmpeg asset
        uses: actions/upload-release-asset@v1
        # ... (content unchanged) ...
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.ensure_release.outputs.result }}
          asset_path: ffmpeg/${{ matrix.folder }}/ffmpeg${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          asset_name: ffmpeg-${{ matrix.folder }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          asset_content_type: application/octet-stream