name: Test Pre-built Sidecars

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'The release tag to download binaries from'
        required: true
  workflow_call:
    inputs:
      release_tag:
        description: 'The release tag to download binaries from'
        required: true
        type: string

jobs:
  test_transcription:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13 # Intel Mac
            arch: macos-x86_64
          - os: macos-14 # Apple Silicon
            arch: macos-arm64
          - os: windows-latest
            arch: windows-x86_64
          - os: windows-latest
            arch: windows-arm64
          - os: ubuntu-latest
            arch: linux-x86_64
          - os: ubuntu-latest
            arch: linux-arm64

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download and Prepare Binaries
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ inputs.release_tag }}
        run: |
          set -ex
          # Define the file extension for Windows
          EXT=""
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            EXT=".exe"
          fi

          # Define the asset names based on the latest release artifacts
          FFMPEG_ASSET="ffmpeg-${{ matrix.arch }}${EXT}"
          WHISPER_ASSET="whisper-cli-${{ matrix.arch }}${EXT}"

          echo "Downloading ${FFMPEG_ASSET} and ${WHISPER_ASSET}..."

          # Download the main binaries from the release
          gh release download "${{ env.RELEASE_TAG }}" --pattern "${FFMPEG_ASSET}" --pattern "${WHISPER_ASSET}" --clobber
          
          # Make the binaries executable on non-Windows runners
          if [[ "${{ runner.os }}" != "Windows" ]]; then
            chmod +x "${FFMPEG_ASSET}"
            chmod +x "${WHISPER_ASSET}"
          fi

          echo "--- Prepared Files ---"
          ls -la

      - name: Download Whisper Model
        run: |
          echo "Downloading ggml-base.en.bin model..."
          curl -L -o ggml-base.en.bin https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-base.en.bin

      - name: Convert Audio to WAV with FFmpeg
        run: |
          EXT=""
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            EXT=".exe"
          fi
          FFMPEG_EXE="./ffmpeg-${{ matrix.arch }}${EXT}"

          echo "Converting audio file with ${FFMPEG_EXE}..."
          "$FFMPEG_EXE" -i sample_data/audio.mp3 -ar 16000 -ac 1 -c:a pcm_s16le audio.wav

      - name: Transcribe with whisper-cli
        run: |
          EXT=""
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            EXT=".exe"
          fi
          # Use the correctly named executable
          WHISPER_EXE="./whisper-cli-${{ matrix.arch }}${EXT}"
          
          echo "--- Transcribing on ${{ matrix.os }} using ${WHISPER_EXE} ---"
          "$WHISPER_EXE" -m ggml-base.en.bin -f audio.wav
