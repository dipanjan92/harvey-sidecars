name: Update Whisper-CPP Sidecar

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Git tag to use for the release (must already exist)'
        required: true
  workflow_call:

jobs:
  build-whisper:
    runs-on: ${{ matrix.os }}
    strategy:
      # When one build fails, we want the others to continue
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            folder: macos-x86_64
            cmake_opts: ""
          - os: macos-14
            folder: macos-arm64
            cmake_opts: "-DCMAKE_OSX_ARCHITECTURES=arm64"
          - os: windows-latest
            folder: windows-x86_64
            cmake_opts: ""
    env:
      MATRIX_FOLDER: ${{ matrix.folder }}
      RELEASE_TAG: ${{ github.event.inputs.release_tag }}
    defaults:
      run:
        shell: bash

    steps:
      # 1. Checkout the repo
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      # 2. Install prerequisites including SDL2
      - name: Install prerequisites
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            git clone https://github.com/microsoft/vcpkg.git
            cd vcpkg
            ./bootstrap-vcpkg.bat
            ./vcpkg install sdl2
            cd ..
          else
            brew install cmake git sdl2
          fi

      # 3. Clone whisper.cpp
      - name: Clone whisper.cpp
        run: git clone --depth 1 https://github.com/ggml-org/whisper.cpp.git whisper.cpp

      # 4. Build whisper-cpp with SDL2 support
      - name: Build whisper-cpp
        run: |
          mkdir -p whisper.cpp/build
          cd whisper.cpp/build
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DWHISPER_SDL2=ON -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake ${{ matrix.cmake_opts }}
          else
            cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DWHISPER_SDL2=ON ${{ matrix.cmake_opts }}
          fi
          cmake --build . --config Release

      # 5. Copy the binaries into our sidecar folder
      - name: Copy whisper-cpp binaries
        run: |
          mkdir -p whisper-cpp/${{ matrix.folder }}
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp whisper.cpp/build/bin/Release/main.exe whisper-cpp/${{ matrix.folder }}/whisper-cpp.exe
            cp whisper.cpp/build/bin/Release/stream.exe whisper-cpp/${{ matrix.folder }}/stream.exe
            cp vcpkg/installed/x64-windows/bin/SDL2.dll whisper-cpp/${{ matrix.folder }}/SDL2.dll
          else
            cp whisper.cpp/build/bin/main whisper-cpp/${{ matrix.folder }}/whisper-cpp
            cp whisper.cpp/build/bin/stream whisper-cpp/${{ matrix.folder }}/stream
          fi

      # 6. List files for debugging
      - name: List files for debugging
        run: |
          echo "--- Contents of release folder ---"
          ls -laR whisper-cpp/${{ matrix.folder }}

      # 7. Ensure GitHub release exists (create if missing)
      - name: Ensure GitHub release
        id: ensure_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const tag = process.env.RELEASE_TAG;
            try {
              const rel = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag
              });
              return rel.data.upload_url;
            } catch {
              const rel = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag,
                commitish: context.sha,
                name: `harvey-sidecars ${tag}`,
                body: `Automated build of whisper-cpp`,
                draft: false,
                prerelease: false
              });
              return rel.data.upload_url;
            }

      # 8. Upload all assets to the release
      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -ex
          cd whisper-cpp/${{ matrix.folder }}
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows asset names
            WHISPER_ASSET="whisper-cpp-${{ matrix.folder }}.exe"
            STREAM_ASSET="stream-${{ matrix.folder }}.exe"

            mv whisper-cpp.exe "${WHISPER_ASSET}"
            mv stream.exe "${STREAM_ASSET}"
            
            # Create checksums
            sha256sum "${WHISPER_ASSET}" > "${WHISPER_ASSET}.sha256"
            sha256sum "${STREAM_ASSET}" > "${STREAM_ASSET}.sha256"

            # Upload all assets
            gh release upload ${{ github.event.inputs.release_tag }} "${WHISPER_ASSET}" "${WHISPER_ASSET}.sha256" "${STREAM_ASSET}" "${STREAM_ASSET}.sha256" SDL2.dll --clobber
          else
            # macOS/Linux asset names
            WHISPER_ASSET="whisper-cpp-${{ matrix.folder }}"
            STREAM_ASSET="stream-${{ matrix.folder }}"

            mv whisper-cpp "${WHISPER_ASSET}"
            mv stream "${STREAM_ASSET}"

            # Create checksums
            shasum -a 256 "${WHISPER_ASSET}" > "${WHISPER_ASSET}.sha256"
            shasum -a 256 "${STREAM_ASSET}" > "${STREAM_ASSET}.sha256"

            # Upload all assets
            gh release upload ${{ github.event.inputs.release_tag }} "${WHISPER_ASSET}" "${WHISPER_ASSET}.sha256" "${STREAM_ASSET}" "${STREAM_ASSET}.sha256" --clobber
          fi
