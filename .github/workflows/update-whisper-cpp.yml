name: Update Whisper-CPP Sidecar

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Git tag to use for the release (must already exist)'
        required: true
  workflow_call:
    inputs:
      release_tag:
        description: 'Git tag to use for the release (must already exist)'
        required: true
        type: string

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ inputs.release_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history for all tags

      - name: Ensure GitHub release exists for tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = '${{ inputs.release_tag }}';
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag,
              });
              console.log(`Release for tag ${tag} already exists.`);
            } catch (error) {
              if (error.status === 404) {
                console.log(`Creating new release for tag ${tag}.`);
                const release = await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: tag,
                  name: `Sidecars ${tag}`,
                  body: `Automated build of whisper.cpp sidecars (whisper-cli and whisper-stream).`,
                  draft: false,
                  prerelease: false,
                });
              } else {
                throw error;
              }
            }

  build-and-upload:
    name: Build & Upload Binaries
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            folder: macos-x86_64
            cmake_opts: ""
          - os: macos-14
            folder: macos-arm64
            cmake_opts: "-DCMAKE_OSX_ARCHITECTURES=arm64"
          - os: windows-latest
            folder: windows-x86_64
            cmake_opts: ""
          - os: windows-latest
            folder: windows-arm64
            cmake_opts: "-A arm64"
          - os: ubuntu-latest
            folder: linux-x86_64
            cmake_opts: ""
          - os: ubuntu-latest
            folder: linux-arm64
            cmake_opts: "-DGGML_ARM_NEON=ON -DGGML_NATIVE=OFF -DGGML_USE_SIMD=OFF"
    
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install prerequisites (macOS)
        if: runner.os == 'macOS'
        run: brew install sdl2

      - name: Install prerequisites (Windows)
        if: runner.os == 'Windows'
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.bat
          if [[ "${{ matrix.folder }}" == "windows-arm64" ]]; then
            ./vcpkg install sdl2:arm64-windows
          else
            ./vcpkg install sdl2:x64-windows
          fi
          cd ..

      - name: Install prerequisites (Linux)
        if: runner.os == 'Linux'
        env:
          TOOLCHAIN_DIR: ${{ github.workspace }}/arm-gnu-toolchain-13.2.rel1-x86_64-aarch64-none-linux-gnu
        run: |
          if [[ "${{ matrix.folder }}" == "linux-arm64" ]]; then
            set -e
            # Download and set up a self-contained aarch64 toolchain instead of using apt
            TOOLCHAIN_URL="https://developer.arm.com/-/media/Files/downloads/gnu/13.2.rel1/binrel/arm-gnu-toolchain-13.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz"
            echo "Downloading toolchain from ${TOOLCHAIN_URL}"
            curl -L -o toolchain.tar.xz ${TOOLCHAIN_URL} || { echo "Failed to download toolchain"; exit 1; }
            echo "Extracting toolchain..."
            mkdir -p ${TOOLCHAIN_DIR} || { echo "Failed to create TOOLCHAIN_DIR"; exit 1; }
            tar -xJf toolchain.tar.xz -C ${TOOLCHAIN_DIR} --strip-components=1 || { echo "Failed to extract toolchain"; exit 1; }
            rm toolchain.tar.xz
            echo "Toolchain extracted to: $(ls -d ${TOOLCHAIN_DIR})"
            ls -l ${TOOLCHAIN_DIR}/bin/aarch64-none-linux-gnu-gcc
            # Build SDL2 from source for arm64, installing it into our toolchain directory
            SDL2_VERSION="2.30.5"
            curl -sL "https://github.com/libsdl-org/SDL/releases/download/release-${SDL2_VERSION}/SDL2-${SDL2_VERSION}.tar.gz" | tar xz
            cd SDL2-${SDL2_VERSION}
            rm -rf build
            mkdir build && cd build
            cmake .. -DCMAKE_C_COMPILER="${{ env.TOOLCHAIN_DIR }}/bin/aarch64-none-linux-gnu-gcc" \
                      -DCMAKE_CXX_COMPILER="${{ env.TOOLCHAIN_DIR }}/bin/aarch64-none-linux-gnu-g++" \
                      -DCMAKE_INSTALL_PREFIX="${{ env.TOOLCHAIN_DIR }}/aarch64-none-linux-gnu" \
                      -DSDL_STATIC=ON \
                      -DSDL_SHARED=OFF
            make -j$(nproc)
            make install
            cd ../..
          else
            sudo apt-get update -y
            sudo apt-get install -y libsdl2-dev
          fi

      - name: Clone whisper.cpp
        run: git clone --depth 1 https://github.com/ggml-org/whisper.cpp.git whisper.cpp

      - name: Build whisper-cpp
        env:
          TOOLCHAIN_DIR: ${{ github.workspace }}/arm-gnu-toolchain-13.2.rel1-x86_64-aarch64-none-linux-gnu
        run: |
          if [[ "${{ matrix.folder }}" == "linux-arm64" ]]; then
            export PKG_CONFIG_PATH="${{ env.TOOLCHAIN_DIR }}/aarch64-none-linux-gnu/lib/pkgconfig"
          fi
          rm -rf whisper.cpp/build
          mkdir -p whisper.cpp/build
          cd whisper.cpp/build
          
          # Common CMake arguments
          CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DWHISPER_SDL2=ON"

          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cmake .. ${CMAKE_ARGS} -DCMAKE_TOOLCHAIN_FILE=../../vcpkg/scripts/buildsystems/vcpkg.cmake ${{ matrix.cmake_opts }}
          elif [[ "${{ matrix.folder }}" == "linux-arm64" ]]; then
            cmake .. ${CMAKE_ARGS} \
              -DCMAKE_C_COMPILER="${{ env.TOOLCHAIN_DIR }}/bin/aarch64-none-linux-gnu-gcc" \
              -DCMAKE_CXX_COMPILER="${{ env.TOOLCHAIN_DIR }}/bin/aarch64-none-linux-gnu-g++" \
              -DCMAKE_PREFIX_PATH="${{ env.TOOLCHAIN_DIR }}/aarch64-none-linux-gnu" \
              -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
              ${{ matrix.cmake_opts }}
          else
            cmake .. ${CMAKE_ARGS} ${{ matrix.cmake_opts }}
          fi
          
          cmake --build . --config Release

      - name: Prepare assets for release
        id: prepare_assets
        run: |
          mkdir -p release_assets
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp whisper.cpp/build/bin/Release/whisper-cli.exe release_assets/whisper-cli.exe
            cp whisper.cpp/build/bin/Release/whisper-stream.exe release_assets/whisper-stream.exe
            if [[ "${{ matrix.folder }}" == "windows-arm64" ]]; then
              cp vcpkg/installed/arm64-windows/bin/SDL2.dll release_assets/SDL2.dll
            else
              cp vcpkg/installed/x64-windows/bin/SDL2.dll release_assets/SDL2.dll
            fi
          else
            cp whisper.cpp/build/bin/whisper-cli release_assets/whisper-cli
            cp whisper.cpp/build/bin/whisper-stream release_assets/whisper-stream
          fi
          echo "--- Prepared assets ---"
          ls -lh release_assets

      - name: Rename, checksum, and upload assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -ex
          cd release_assets

          if [[ "${{ runner.os }}" == "Windows" ]]; then
            CLI_ASSET="whisper-cli-${{ matrix.folder }}.exe"
            STREAM_ASSET="whisper-stream-${{ matrix.folder }}.exe"
            mv whisper-cli.exe "${CLI_ASSET}"
            mv whisper-stream.exe "${STREAM_ASSET}"

            sha256sum "${CLI_ASSET}" > "${CLI_ASSET}.sha256"
            sha256sum "${STREAM_ASSET}" > "${STREAM_ASSET}.sha256"
            
            gh release upload ${{ needs.create-release.outputs.release_tag }} "${CLI_ASSET}" "${CLI_ASSET}.sha256" "${STREAM_ASSET}" "${STREAM_ASSET}.sha256" SDL2.dll --clobber
          else
            CLI_ASSET="whisper-cli-${{ matrix.folder }}"
            STREAM_ASSET="whisper-stream-${{ matrix.folder }}"
            mv whisper-cli "${CLI_ASSET}"
            mv whisper-stream "${STREAM_ASSET}"

            shasum -a 256 "${CLI_ASSET}" > "${CLI_ASSET}.sha256"
            shasum -a 256 "${STREAM_ASSET}" > "${STREAM_ASSET}.sha256"

            gh release upload ${{ needs.create-release.outputs.release_tag }} "${CLI_ASSET}" "${CLI_ASSET}.sha256" "${STREAM_ASSET}" "${STREAM_ASSET}.sha256" --clobber
          fi
