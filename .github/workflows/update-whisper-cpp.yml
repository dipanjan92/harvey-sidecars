name: Update Whisper-CPP Sidecar

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Git tag to use for the release (must already exist)'
        required: true
  workflow_call:

jobs:
  build-whisper:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13
            folder: macos-x86_64
            cmake_opts: ""
          - os: macos-14
            folder: macos-arm64
            cmake_opts: "-DCMAKE_OSX_ARCHITECTURES=arm64"
          - os: windows-latest
            folder: windows-x86_64
            cmake_opts: ""
    env:
      MATRIX_FOLDER: ${{ matrix.folder }}
      RELEASE_TAG: ${{ github.event.inputs.release_tag }}
    defaults:
      run:
        shell: bash

    steps:
      # 1. Checkout the repo
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      # 2. Install cmake
      - name: Install prerequisites
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            choco install cmake -y
          else
            brew install cmake git
          fi

      # 3. Clone whisper.cpp
      - name: Clone whisper.cpp
        run: git clone --depth 1 https://github.com/ggml-org/whisper.cpp.git whisper.cpp

      # 4. Build whisper-cpp
      - name: Build whisper-cpp
        run: |
          mkdir -p whisper.cpp/build
          cd whisper.cpp/build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF ${{ matrix.cmake_opts }}
          cmake --build . --config Release

      # 5. Copy the binaries into our sidecar folder
      - name: Copy whisper-cpp binaries
        run: |
          mkdir -p whisper-cpp/${{ matrix.folder }}
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp whisper.cpp/build/bin/Release/whisper-cli.exe whisper-cpp/${{ matrix.folder }}/whisper-cpp.exe
            cp whisper.cpp/build/bin/Release/stream.exe whisper-cpp/${{ matrix.folder }}/stream.exe
          else
            cp whisper.cpp/build/bin/whisper-cli whisper-cpp/${{ matrix.folder }}/whisper-cpp
            cp whisper.cpp/build/bin/stream whisper-cpp/${{ matrix.folder }}/stream
          fi

      # 6. Ensure GitHub release exists (create if missing)
      - name: Ensure GitHub release
        id: ensure_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            // Use the user-supplied tag
            const tag = process.env.RELEASE_TAG;
            try {
              const rel = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag
              });
              return rel.data.upload_url;
            } catch {
              const rel = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag,
                commitish: context.sha,
                name: `harvey-sidecars ${tag}`,
                body: `Automated build of whisper-cpp for ${process.env.MATRIX_FOLDER}`,
                draft: false,
                prerelease: false
              });
              return rel.data.upload_url;
            }

      # 7. Upload whisper-cpp to that release
      - name: Upload whisper-cpp asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.ensure_release.outputs.result }}
          asset_path: whisper-cpp/${{ matrix.folder }}/whisper-cpp${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          asset_name: whisper-cpp-${{ matrix.folder }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          asset_content_type: application/octet-stream

      # 8. Upload stream to that release
      - name: Upload stream asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.ensure_release.outputs.result }}
          asset_path: whisper-cpp/${{ matrix.folder }}/stream${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          asset_name: stream-${{ matrix.folder }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          asset_content_type: application/octet-stream

      # 9. Calculate and upload checksums
      - name: Calculate and upload checksums
        run: |
          cd whisper-cpp/${{ matrix.folder }}
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Checksum for whisper-cpp
            BINARY_NAME_W="whisper-cpp.exe"
            ASSET_NAME_W="whisper-cpp-${{ matrix.folder }}.exe"
            sha256sum $BINARY_NAME_W | sed "s/$BINARY_NAME_W/$ASSET_NAME_W/" > ${ASSET_NAME_W}.sha256
            # Checksum for stream
            BINARY_NAME_S="stream.exe"
            ASSET_NAME_S="stream-${{ matrix.folder }}.exe"
            sha256sum $BINARY_NAME_S | sed "s/$BINARY_NAME_S/$ASSET_NAME_S/" > ${ASSET_NAME_S}.sha256
          else
            # Checksum for whisper-cpp
            BINARY_NAME_W="whisper-cpp"
            ASSET_NAME_W="whisper-cpp-${{ matrix.folder }}"
            shasum -a 256 $BINARY_NAME_W | sed "s/$BINARY_NAME_W/$ASSET_NAME_W/" > ${ASSET_NAME_W}.sha256
            # Checksum for stream
            BINARY_NAME_S="stream"
            ASSET_NAME_S="stream-${{ matrix.folder }}"
            shasum -a 256 $BINARY_NAME_S | sed "s/$BINARY_NAME_S/$ASSET_NAME_S/" > ${ASSET_NAME_S}.sha256
          fi

      # 10. Upload checksums
      - name: Upload whisper-cpp checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.ensure_release.outputs.result }}
          asset_path: whisper-cpp/${{ matrix.folder }}/whisper-cpp-${{ matrix.folder }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}.sha256
          asset_name: whisper-cpp-${{ matrix.folder }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}.sha256
          asset_content_type: text/plain

      - name: Upload stream checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.ensure_release.outputs.result }}
          asset_path: whisper-cpp/${{ matrix.folder }}/stream-${{ matrix.folder }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}.sha256
          asset_name: stream-${{ matrix.folder }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}.sha256
          asset_content_type: text/plain