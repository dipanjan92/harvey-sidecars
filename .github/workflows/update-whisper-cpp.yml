name: Update Whisper-CPP Sidecar

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Git tag to use for the release (must already exist)'
        required: true
  workflow_call:
    inputs:
      release_tag:
        description: 'Git tag to use for the release (must already exist)'
        required: true
        type: string

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ inputs.release_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history for all tags

      - name: Ensure GitHub release exists for tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = '${{ inputs.release_tag }}';
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag,
              });
              console.log(`Release for tag ${tag} already exists.`);
            } catch (error) {
              if (error.status === 404) {
                console.log(`Creating new release for tag ${tag}.`);
                const release = await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: tag,
                  name: `Sidecars ${tag}`,
                  body: `Automated build of whisper.cpp sidecars (whisper-cli and whisper-stream).`,
                  draft: false,
                  prerelease: false,
                });
              } else {
                throw error;
              }
            }

  build-and-upload:
    name: Build & Upload Binaries
    needs: create-release
    runs-on: ${{ matrix.os }}
    env: 
      SDL2_DIR: "" # Initialize SDL2_DIR to avoid static analysis warnings
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            folder: macos-x86_64
            cmake_opts: ""
          - os: macos-14
            folder: macos-arm64
            cmake_opts: "-DCMAKE_OSX_ARCHITECTURES=arm64"
          - os: windows-latest
            folder: windows-x86_64
            cmake_opts: ""
          - os: windows-latest
            folder: windows-arm64
            cmake_opts: "-G \"Unix Makefiles\""
          - os: ubuntu-latest
            folder: linux-x86_64
            cmake_opts: ""
          - os: ubuntu-latest
            folder: linux-arm64
            cmake_opts: ""
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install prerequisites (macOS)
        if: runner.os == 'macOS'
        run: brew install sdl2

      - name: Install prerequisites (Linux)
        if: runner.os == 'Linux'
        run: |
          if [[ "${{ matrix.folder }}" == "linux-arm64" ]]; then
            sudo dpkg --add-architecture arm64
            sudo apt-get update
            sudo apt-get install -y libsdl2-dev:arm64
          else
            sudo apt-get update
            sudo apt-get install -y libsdl2-dev
          fi

      - name: Install prerequisites (Windows)
        if: runner.os == 'Windows'
        run: |
          SDL2_VERSION="2.30.3"
          if [[ "${{ matrix.folder }}" == "windows-arm64" ]]; then
            SDL2_ARCH="arm64"
          else
            SDL2_ARCH="x64"
          fi
          SDL2_URL="https://github.com/libsdl-org/SDL-builds/releases/download/SDL-${SDL2_VERSION}/SDL2-${SDL2_VERSION}-win32-${SDL2_ARCH}.zip"
          curl -sL -o SDL2.zip "${SDL2_URL}"
          tar -xf SDL2.zip
          echo "SDL2_DIR=$(pwd)/SDL2-${SDL2_VERSION}" >> $GITHUB_ENV

      - name: Setup MSYS2 environment (Windows ARM64)
        if: matrix.folder == 'windows-arm64'
        uses: msys2/setup-msys2@v2
        with:
          msystem: CLANG64
          update: true
          install: >-
            make
            cmake
            mingw-w64-clang-x86_64-toolchain
            mingw-w64-clang-aarch64-pkg-config
            mingw-w64-clang-aarch64-zlib
            mingw-w64-clang-aarch64-libiconv

      - name: Clone whisper.cpp
        run: git clone --depth 1 https://github.com/ggml-org/whisper.cpp.git whisper.cpp

      - name: Build whisper-cpp
        run: |
          rm -rf whisper.cpp/build
          mkdir -p whisper.cpp/build
          cd whisper.cpp/build
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DWHISPER_SDL2=ON -DCMAKE_PREFIX_PATH=${{ env.SDL2_DIR }} ${{ matrix.cmake_opts }}
          elif [[ "${{ matrix.folder }}" == "linux-arm64" ]]; then
            cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DWHISPER_SDL2=ON \
              -DCMAKE_C_COMPILER="aarch64-linux-gnu-gcc" \
              -DCMAKE_CXX_COMPILER="aarch64-linux-gnu-g++" \
              -DCMAKE_SYSTEM_NAME=Linux \
              -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
              ${{ matrix.cmake_opts }}
          else
            cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DWHISPER_SDL2=ON ${{ matrix.cmake_opts }}
          fi
          cmake --build . --config Release

      - name: Prepare assets for release
        id: prepare_assets
        run: |
          mkdir -p release_assets
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp whisper.cpp/build/bin/Release/whisper-cli.exe release_assets/whisper-cli.exe
            cp whisper.cpp/build/bin/Release/whisper-stream.exe release_assets/whisper-stream.exe
            cp ${{ env.SDL2_DIR }}/bin/SDL2.dll release_assets/SDL2.dll
          else
            cp whisper.cpp/build/bin/whisper-cli release_assets/whisper-cli
            cp whisper.cpp/build/bin/whisper-stream release_assets/whisper-stream
          fi
          echo "--- Prepared assets ---"
          ls -lh release_assets

      - name: Rename, checksum, and upload assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -ex
          cd release_assets

          if [[ "${{ runner.os }}" == "Windows" ]]; then
            CLI_ASSET="whisper-cli-${{ matrix.folder }}.exe"
            STREAM_ASSET="whisper-stream-${{ matrix.folder }}.exe"
            mv whisper-cli.exe "${CLI_ASSET}"
            mv whisper-stream.exe "${STREAM_ASSET}"

            sha256sum "${CLI_ASSET}" > "${CLI_ASSET}.sha256"
            sha256sum "${STREAM_ASSET}" > "${STREAM_ASSET}.sha256"
            
            gh release upload ${{ needs.create-release.outputs.release_tag }} "${CLI_ASSET}" "${CLI_ASSET}.sha256" "${STREAM_ASSET}" "${STREAM_ASSET}.sha256" SDL2.dll --clobber
          else
            CLI_ASSET="whisper-cli-${{ matrix.folder }}"
            STREAM_ASSET="whisper-stream-${{ matrix.folder }}"
            mv whisper-cli "${CLI_ASSET}"
            mv whisper-stream "${STREAM_ASSET}"

            shasum -a 256 "${CLI_ASSET}" > "${CLI_ASSET}.sha256"
            shasum -a 256 "${STREAM_ASSET}" > "${STREAM_ASSET}.sha256"

            gh release upload ${{ needs.create-release.outputs.release_tag }} "${CLI_ASSET}" "${CLI_ASSET}.sha256" "${STREAM_ASSET}" "${STREAM_ASSET}.sha256" --clobber
          fi
