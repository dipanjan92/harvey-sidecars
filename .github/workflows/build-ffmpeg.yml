name: Build FFmpeg Binaries

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'The release tag to use for the FFmpeg build (e.g., n5.1.4)'
        required: true

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_TAG: ${{ github.event.inputs.release_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Handle Git Tag and Release
        run: |
          # Delete release and associated tag, ignoring errors if it doesn't exist
          gh release delete ${{ env.RELEASE_TAG }} --yes --cleanup-tag || echo "Release ${{ env.RELEASE_TAG }} not found, proceeding to create it."
          # Create new release, which also creates the tag
          gh release create ${{ env.RELEASE_TAG }} --notes "Supported platforms: windows-x86_64, linux-x86_64, linux-arm64, macos-x86_64, macos-arm64"

  build:
    needs: prepare-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - folder: windows-x86_64
            os: ubuntu-latest
            arch: x86_64
            cross_prefix: x86_64-w64-mingw32-
            target_os: mingw32
            extra_opts: "--extra-cflags=-I/usr/x86_64-w64-mingw32/include --extra-ldflags=-L/usr/x86_64-w64-mingw32/lib"
          - folder: linux-x86_64
            os: ubuntu-latest
            arch: x86_64
            cross_prefix: ""
            target_os: linux
            extra_opts: ""
          - folder: linux-arm64
            os: ubuntu-latest
            arch: aarch64
            cross_prefix: aarch64-linux-gnu-
            target_os: linux
            extra_opts: ""
          - folder: macos-x86_64
            os: macos-13
            arch: x86_64
            cross_prefix: ""
            target_os: darwin
            extra_opts: "--enable-videotoolbox"
          - folder: macos-arm64
            os: macos-14
            arch: arm64
            cross_prefix: ""
            target_os: darwin
            extra_opts: "--enable-videotoolbox"

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_TAG: ${{ github.event.inputs.release_tag }}
      FFMPEG_TAG: "n5.1.4"

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build prerequisites (Linux)
        if: runner.os == 'Linux'
        run: |
          if [[ "${{ matrix.folder }}" == "windows-x86_64" ]]; then
            sudo apt-get update -y
            sudo apt-get install -y yasm nasm pkg-config libz-mingw-w64-dev mingw-w64 libiconv-hook-dev
          elif [[ "${{ matrix.folder }}" == "linux-x86_64" ]]; then
            sudo apt-get update -y
            sudo apt-get install -y yasm nasm pkg-config zlib1g-dev
          elif [[ "${{ matrix.folder }}" == "linux-arm64" ]]; then
            sudo dpkg --add-architecture arm64
            sudo rm /etc/apt/sources.list.d/ubuntu.sources || true
            RELEASE_NAME=$(lsb_release -cs)
            echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ ${RELEASE_NAME} main restricted universe multiverse" | sudo tee /etc/apt/sources.list
            echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ ${RELEASE_NAME}-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
            echo "deb [arch=amd64] http://security.ubuntu.com/ubuntu/ ${RELEASE_NAME}-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
            echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${RELEASE_NAME} main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
            echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${RELEASE_NAME}-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
            echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${RELEASE_NAME}-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
            sudo apt-get update
            sudo apt-get install -y yasm nasm pkg-config gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu zlib1g-dev:arm64
          fi

      - name: Install build prerequisites (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install yasm pkg-config nasm

      - name: Clone FFmpeg source
        run: |
          echo "Cloning FFmpeg source branch/tag: ${{ env.FFMPEG_TAG }} for ${{ matrix.folder }}"
          rm -rf ffmpeg-src # Clean before clone
          git clone --depth 1 --branch "${{ env.FFMPEG_TAG }}" https://git.ffmpeg.org/ffmpeg.git ffmpeg-src

      - name: Configure & build FFmpeg
        run: |
          if [[ "${{ matrix.folder }}" == "windows-arm64" ]]; then
            export PATH="/usr/lib/llvm-mingw/bin:$PATH"
            export AR=llvm-ar
            export RANLIB=llvm-ranlib
          fi

          echo "Configuring and building FFmpeg for ${{ matrix.folder }} on ${{ matrix.os }}"
          CPU_COUNT=$(nproc || sysctl -n hw.logicalcpu)
          echo "Using $CPU_COUNT cores for make"

          INSTALL_PREFIX="${{ github.workspace }}/ffmpeg/${{ matrix.folder }}"
          mkdir -p "${INSTALL_PREFIX}"
          cd ffmpeg-src

          BASE_CONFIGURE_FLAGS=(
            --prefix="${INSTALL_PREFIX}"
            --enable-shared
            --disable-static
            --disable-gpl
            --disable-nonfree
            --disable-ffplay
            --disable-ffprobe
            --disable-doc
            --enable-zlib
            --disable-libmp3lame
          )

          CONFIGURE_OPTS=(
            --arch=${{ matrix.arch }}
            --cross-prefix=${{ matrix.cross_prefix }}
            --target-os=${{ matrix.target_os }}
            ${{ matrix.extra_opts }}
          )

          echo "Running configure with matrix opts: ${CONFIGURE_OPTS[@]}"
          ./configure "${BASE_CONFIGURE_FLAGS[@]}" "${CONFIGURE_OPTS[@]}"
          
          make -j${CPU_COUNT}
          make install
          cd ..

      - name: Show config.log on failure
        if: failure()
        run: |
          if [ -f "ffmpeg-src/ffbuild/config.log" ]; then
            echo "--- FFmpeg config.log ---"
            cat ffmpeg-src/ffbuild/config.log
          fi

      - name: Package and Upload Release Assets
        run: |
          INSTALL_DIR="${{ github.workspace }}/ffmpeg/${{ matrix.folder }}"
          ASSET_DIR="${{ github.workspace }}/assets"
          mkdir -p "${ASSET_DIR}"

          # Determine executable name
          if [[ "${{ matrix.target_os }}" == "mingw32" ]]; then
            EXE_NAME="ffmpeg.exe"
          else
            EXE_NAME="ffmpeg"
          fi

          # Strip the binary
          if [[ -n "${{ matrix.cross_prefix }}" ]]; then
            ${{ matrix.cross_prefix }}strip "${INSTALL_DIR}/bin/${EXE_NAME}"
          else
            strip "${INSTALL_DIR}/bin/${EXE_NAME}"
          fi

          # Create Zip archive
          ZIP_NAME="ffmpeg-${{ matrix.folder }}.zip"
          cd "${INSTALL_DIR}/bin"
          zip "${ASSET_DIR}/${ZIP_NAME}" *
          cd -

          # Create checksum
          cd "${ASSET_DIR}"
          shasum -a 256 "${ZIP_NAME}" > "${ZIP_NAME}.sha256"
          cd -

          # Upload assets
          gh release upload ${{ env.RELEASE_TAG }} "${ASSET_DIR}/${ZIP_NAME}" "${ASSET_DIR}/${ZIP_NAME}.sha256" --clobber

