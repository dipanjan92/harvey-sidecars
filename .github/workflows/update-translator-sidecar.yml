name: Update Translator Sidecar

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Git tag to use for the release (must already exist)'
        required: true
  workflow_call:
    inputs:
      release_tag:
        description: 'Git tag to use for the release (must already exist)'
        required: true
        type: string

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ inputs.release_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history for all tags

      - name: Ensure GitHub release exists for tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = '${{ inputs.release_tag }}';
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag,
              });
              console.log(`Release for tag ${tag} already exists.`);
            } catch (error) {
              if (error.status === 404) {
                console.log(`Creating new release for tag ${tag}.`);
                const release = await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: tag,
                  name: `Harvey Sidecars ${tag}`,
                  body: `Automated build of translator sidecar. Release tag: ${tag}.`,
                  draft: false,
                  prerelease: false,
                });
              } else {
                throw error;
              }
            }

  build-and-upload:
    name: Build & Upload Binaries
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [20.x]
        include:
          - os: ubuntu-latest
            pkg_target: node20-linux-x64
            asset_name_suffix: "linux-x86_64"
            executable_extension: ""
          - os: macos-latest
            pkg_target: node20-macos-x64
            asset_name_suffix: "macos-x86_64"
            executable_extension: ""
          - os: windows-latest
            pkg_target: node20-win-x64
            asset_name_suffix: "windows-x86_64"
            executable_extension: ".exe"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install pkg
        run: npm install -g pkg

      - name: Install sidecar dependencies
        run: npm install
        working-directory: translator

      - name: Build translator-sidecar
        run: pkg translator.mjs --targets ${{ matrix.pkg_target }} --output translator-sidecar-${{ matrix.asset_name_suffix }}${{ matrix.executable_extension }}
        working-directory: translator

      - name: Rename, checksum, and upload assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ needs.create-release.outputs.release_tag }}
        run: |
          set -ex
          cd translator

          BINARY_PATH="translator-sidecar-${{ matrix.asset_name_suffix }}${{ matrix.executable_extension }}"
          SHA_PATH="${BINARY_PATH}.sha256"

          # Calculate checksum
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            sha256sum "$BINARY_PATH" > "$SHA_PATH"
          else
            shasum -a 256 "$BINARY_PATH" > "$SHA_PATH"
          fi

          echo "Uploading ${BINARY_PATH} and ${SHA_PATH} to release ${{ env.RELEASE_TAG }}"
          gh release upload ${{ env.RELEASE_TAG }} "$BINARY_PATH" "$SHA_PATH" --clobber