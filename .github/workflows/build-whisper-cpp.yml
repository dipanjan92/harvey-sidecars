name: Build Whisper-CPP CLI & Stream

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Git tag to use for the release (must already exist)'
        required: true
  workflow_call:
    inputs:
      release_tag:
        description: 'Git tag to use for the release (must already exist)'
        required: true
        type: string

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ inputs.release_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history for all tags

      - name: Ensure GitHub release exists for tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = '${{ inputs.release_tag }}';
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag,
              });
              console.log(`Release for tag ${tag} already exists.`);
            } catch (error) {
              if (error.status === 404) {
                console.log(`Creating new release for tag ${tag}.`);
                const release = await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: tag,
                  name: `Harvey Sidecars ${tag}`,
                  body: `Supported platforms for this release: \n- windows-x86_64\n- windows-arm64\n- linux-x86_64\n- linux-arm64\n- macos-x86_64\n- macos-arm64`,
                  draft: false,
                  prerelease: false,
                });
              } else {
                throw error;
              }
            }

  build-and-upload:
    name: Build & Upload Binaries
    needs: create-release
    runs-on: ${{ matrix.os }}
    env:
      SDL2_DIR: "" # Initialize SDL2_DIR to avoid static analysis warnings
      TOOLCHAIN_DIR: "" # Initialize TOOLCHAIN_DIR to avoid static analysis warnings
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            folder: macos-x86_64
            cmake_opts: ""
          - os: macos-14
            folder: macos-arm64
            cmake_opts: "-DCMAKE_OSX_ARCHITECTURES=arm64"
          - os: windows-latest
            folder: windows-x86_64
            cmake_opts: ""
          - os: windows-latest
            folder: windows-arm64
            cmake_opts: ""
          - os: ubuntu-latest
            folder: linux-x86_64
            cmake_opts: ""
          - os: ubuntu-latest
            folder: linux-arm64
            cmake_opts: ""
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install prerequisites (macOS)
        if: runner.os == 'macOS'
        run: brew install sdl2

      - name: Setup MSYS2 environment (Windows ARM64)
        if: matrix.folder == 'windows-arm64'
        uses: msys2/setup-msys2@v2
        with:
          msystem: CLANGARM64
          update: true
          install: >-
            make
            cmake
            mingw-w64-clang-aarch64-toolchain
            mingw-w64-clang-aarch64-pkg-config
            mingw-w64-clang-aarch64-openblas
            mingw-w64-clang-aarch64-zlib
            mingw-w64-clang-aarch64-libiconv
            zip

      - name: Setup MSYS2 environment (Windows x86_64)
        if: matrix.folder == 'windows-x86_64'
        uses: msys2/setup-msys2@v2
        with:
          msystem: CLANG64
          update: true
          install: >-
            make
            cmake
            mingw-w64-clang-x86_64-toolchain
            mingw-w64-clang-x86_64-pkg-config
            mingw-w64-clang-x86_64-openblas
            mingw-w64-clang-x86_64-zlib
            mingw-w64-clang-x86_64-libiconv
            zip

      - name: Install prerequisites (Linux)
        if: runner.os == 'Linux' && matrix.container == ''
        run: |
          set -e
          if [[ "${{ matrix.folder }}" == "linux-arm64" ]]; then
            # 1. Install host build tools for ARM64 cross-compilation
            sudo apt-get update -y
            sudo apt-get install -y build-essential cmake curl zip

            # 2. Create a self-contained cross-compilation environment for ARM64
            TOOLCHAIN_DIR_PATH="${{ github.workspace }}/arm-gnu-toolchain"
            SDL2_INSTALL_PATH="${{ github.workspace }}/SDL2-install-arm64"
            echo "TOOLCHAIN_DIR=${TOOLCHAIN_DIR_PATH}" >> $GITHUB_ENV
            echo "SDL2_DIR=${SDL2_INSTALL_PATH}" >> $GITHUB_ENV

            # 3. Download and extract the AArch64 toolchain
            TOOLCHAIN_URL="https://developer.arm.com/-/media/Files/downloads/gnu/13.2.rel1/binrel/arm-gnu-toolchain-13.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz"
            echo "Downloading toolchain..."
            curl -L -o toolchain.tar.xz "${TOOLCHAIN_URL}"
            echo "Extracting toolchain..."
            mkdir -p "${TOOLCHAIN_DIR_PATH}"
            tar -xJf toolchain.tar.xz -C "${TOOLCHAIN_DIR_PATH}" --strip-components=1

            # 4. Download and build SDL2 from source using the cross-compiler
            SDL2_VERSION="2.30.5"
            echo "Downloading SDL2 source..."
            curl -sL "https://github.com/libsdl-org/SDL/releases/download/release-${SDL2_VERSION}/SDL2-${SDL2_VERSION}.tar.gz" | tar xz
            cd SDL2-${SDL2_VERSION}
            mkdir build && cd build
            echo "Configuring and building SDL2 for aarch64..."
            cmake .. -DCMAKE_C_COMPILER="${TOOLCHAIN_DIR_PATH}/bin/aarch64-none-linux-gnu-gcc" \
                     -DCMAKE_CXX_COMPILER="${TOOLCHAIN_DIR_PATH}/bin/aarch64-none-linux-gnu-g++" \
                     -DCMAKE_INSTALL_PREFIX="${SDL2_INSTALL_PATH}" \
                     -DSDL_STATIC=ON \
                     -DSDL_SHARED=OFF
            make -j$(nproc)
            make install
          else
            # 1. Install host build tools for x86_64 static compilation
            sudo apt-get update -y
            sudo apt-get install -y build-essential cmake curl zip

            # 2. Set up environment for self-contained x86_64 build
            SDL2_INSTALL_PATH="${{ github.workspace }}/SDL2-install-x86_64"
            echo "SDL2_DIR=${SDL2_INSTALL_PATH}" >> $GITHUB_ENV

            # 3. Download and build SDL2 from source using native compilers
            SDL2_VERSION="2.30.5"
            echo "Downloading SDL2 source..."
            curl -sL "https://github.com/libsdl-org/SDL/releases/download/release-${SDL2_VERSION}/SDL2-${SDL2_VERSION}.tar.gz" | tar xz
            cd SDL2-${SDL2_VERSION}
            mkdir build && cd build
            echo "Configuring and building SDL2 for x86_64..."
            cmake .. -DCMAKE_INSTALL_PREFIX="${SDL2_INSTALL_PATH}" \
                     -DSDL_STATIC=ON \
                     -DSDL_SHARED=OFF
            make -j$(nproc)
            make install
          fi

      - name: Install prerequisites (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          SDL2_VERSION="2.30.5"
          echo "Building SDL2 from source for ${{ matrix.folder }}"...
          curl -sL "https://github.com/libsdl-org/SDL/releases/download/release-${SDL2_VERSION}/SDL2-${SDL2_VERSION}.tar.gz" | tar xz
          cd SDL2-${SDL2_VERSION}

          INSTALL_PREFIX_WIN="${{ github.workspace }}/SDL2-install"
          INSTALL_PREFIX_UNIX="$(cygpath -u "${INSTALL_PREFIX_WIN}")"
          HOST_ARCH=""
          if [[ "${{ matrix.folder }}" == "windows-arm64" ]]; then
            HOST_ARCH="--host=aarch64-w64-mingw32"
            export CC=aarch64-w64-mingw32-clang
            export CXX=aarch64-w64-mingw32-clang++
          fi

          ./configure ${HOST_ARCH} \
            --prefix="${INSTALL_PREFIX_UNIX}" \
            --enable-static \
            --disable-shared

          make -j$(nproc)
          make install

          echo "SDL2_DIR=${INSTALL_PREFIX_WIN}" >> $GITHUB_ENV
          cd ../..

      - name: List installed SDL2 files (Debug)
        if: runner.os == 'Windows' && matrix.folder == 'windows-arm64'
        run: |
          echo "Listing contents of ${{ github.workspace }}/SDL2-install:"
          ls -R "${{ github.workspace }}/SDL2-install" || true

      - name: Clone whisper.cpp
        run: git clone --depth 1 --branch v1.6.2 https://github.com/ggml-org/whisper.cpp.git whisper.cpp

      - name: Build (Windows Cross-Compile)
        if: matrix.container != ''
        run: |
          set -e
          apt-get update && apt-get install -y cmake curl zip

          # Build SDL2
          SDL2_INSTALL_PATH="${{ github.workspace }}/SDL2-install-${{ matrix.folder }}"
          echo "SDL2_DIR=${SDL2_INSTALL_PATH}" >> $GITHUB_ENV
          HOST_ARCH=""
          if [[ "${{ matrix.folder }}" == "windows-arm64" ]]; then
            HOST_ARCH="aarch64-w64-mingw32"
          else
            HOST_ARCH="x86_64-w64-mingw32"
          fi
          SDL2_VERSION="2.30.5"
          curl -sL "https://github.com/libsdl-org/SDL/releases/download/release-${SDL2_VERSION}/SDL2-${SDL2_VERSION}.tar.gz" | tar xz
          cd SDL2-${SDL2_VERSION}
          ./configure --host=${HOST_ARCH} --prefix=${SDL2_INSTALL_PATH} --enable-static --disable-shared
          make -j$(nproc)
          make install
          cd ..

          # Build whisper.cpp
          cd whisper.cpp
          rm -rf build
          mkdir build && cd build
          INSTALL_PREFIX="${{ github.workspace }}/whisper-cpp-install/${{ matrix.folder }}"
          TOOLCHAIN_FILE="${{ github.workspace }}/.github/toolchains/${HOST_ARCH}.cmake"
          cmake .. -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} \
                   -DCMAKE_BUILD_TYPE=Release \
                   -DBUILD_SHARED_LIBS=OFF \
                   -DWHISPER_SDL2=ON \
                   -DWHISPER_OPENBLAS=ON \
                   -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} \
                   -DCMAKE_PREFIX_PATH=${SDL2_INSTALL_PATH} \
                   -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc -static-libstdc++ -luser32 -lgdi32 -lwinmm -limm32 -lole32 -loleaut32 -lversion -luuid -lsetupapi -lksuser -lshell32"
          make -j$(nproc) main stream
          make install

      - name: Build whisper-cpp (macOS/Linux)
        if: runner.os != 'Windows' && matrix.container == ''
        run: |
          rm -rf whisper.cpp/build
          mkdir -p whisper.cpp/build
          cd whisper.cpp/build
          INSTALL_PREFIX="${{ github.workspace }}/whisper-cpp-install/${{ matrix.folder }}"
          mkdir -p "${INSTALL_PREFIX}"
          if [[ "${{ matrix.folder }}" == "linux-arm64" ]]; then
            cmake .. -DCMAKE_BUILD_TYPE=Release \
                     -DBUILD_SHARED_LIBS=OFF \
                     -DWHISPER_SDL2=ON \
                     -DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}" \
                     -DCMAKE_SYSTEM_NAME=Linux \
                     -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
                     -DCMAKE_C_COMPILER="${{ env.TOOLCHAIN_DIR }}/bin/aarch64-none-linux-gnu-gcc" \
                     -DCMAKE_CXX_COMPILER="${{ env.TOOLCHAIN_DIR }}/bin/aarch64-none-linux-gnu-g++" \
                     -DCMAKE_PREFIX_PATH="${{ env.SDL2_DIR }}" \
                     -DCMAKE_EXE_LINKER_FLAGS="-static"
            make -j$(nproc) main stream
            make install
            mkdir -p "${INSTALL_PREFIX}/bin/"
            cp ./bin/main ./bin/stream "${INSTALL_PREFIX}/bin/"
          elif [[ "${{ matrix.folder }}" == "linux-x86_64" ]]; then
            cmake .. -DCMAKE_BUILD_TYPE=Release \
                     -DBUILD_SHARED_LIBS=OFF \
                     -DWHISPER_SDL2=ON \
                     -DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}" \
                     -DCMAKE_PREFIX_PATH="${{ env.SDL2_DIR }}" \
                     -DCMAKE_EXE_LINKER_FLAGS="-static"
            make -j$(nproc) main stream
            make install
            mkdir -p "${INSTALL_PREFIX}/bin/"
            cp ./bin/main ./bin/stream "${INSTALL_PREFIX}/bin/"
          else # For macOS
            cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DWHISPER_SDL2=ON -DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}" ${{ matrix.cmake_opts }}
            cmake --build . --config Release --target main --target stream
            cmake --build . --config Release --target install
            mkdir -p "${INSTALL_PREFIX}/bin/"
            cp ./bin/main ./bin/stream "${INSTALL_PREFIX}/bin/"
          fi

      - name: Build whisper-cpp (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          rm -rf whisper.cpp/build
          mkdir -p whisper.cpp/build
          cd whisper.cpp/build
          INSTALL_PREFIX="${{ github.workspace }}/whisper-cpp-install/${{ matrix.folder }}"
          mkdir -p "${INSTALL_PREFIX}"
          SDL2_DIR_UNIX="$(cygpath -u "${{ env.SDL2_DIR }}")"
          CMAKE_COMMON_FLAGS="-DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DWHISPER_SDL2=ON -DWHISPER_OPENBLAS=OFF -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX}"
          cmake .. ${CMAKE_COMMON_FLAGS} ${{ matrix.cmake_opts }} -DCMAKE_PREFIX_PATH=${SDL2_DIR_UNIX} -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc -static-libstdc++ -luser32 -lgdi32 -lwinmm -limm32 -lole32 -loleaut32 -lversion -luuid -lsetupapi -lksuser -lshell32"
          cmake --build . --config Release --target main --target stream --parallel
          cmake --build . --config Release --target install
          mkdir -p "${INSTALL_PREFIX}/bin/"
          cp bin/main.exe bin/stream.exe "${INSTALL_PREFIX}/bin/"

      - name: List installed whisper-cpp files (Debug)
        run: |
          INSTALL_PREFIX="${{ github.workspace }}/whisper-cpp-install/${{ matrix.folder }}"
          echo "Listing contents of ${INSTALL_PREFIX}:"
          ls -R "${INSTALL_PREFIX}" || true

      - name: Prepare assets for release
        id: prepare_assets
        run: |
          mkdir -p release_assets
          INSTALL_PREFIX="${{ github.workspace }}/whisper-cpp-install/${{ matrix.folder }}"
          if [[ "${{ matrix.folder }}" == "windows-x86_64" || "${{ matrix.folder }}" == "windows-arm64" ]]; then
            cp "${INSTALL_PREFIX}/bin/main.exe" release_assets/whisper-cli.exe
            cp "${INSTALL_PREFIX}/bin/stream.exe" release_assets/whisper-stream.exe
          else
            cp "${INSTALL_PREFIX}/bin/main" release_assets/whisper-cli
            cp "${INSTALL_PREFIX}/bin/stream" release_assets/whisper-stream
          fi
          echo "--- Prepared assets ---"
          ls -lh release_assets


      - name: Upload assets (macOS/Linux)
        if: runner.os != 'Windows'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -ex
          cd release_assets

          # Create zip archive
          ZIP_ASSET="whisper-sidecars-${{ matrix.folder }}.zip"
          zip "${ZIP_ASSET}" *

          # Create checksum
          shasum -a 256 "${ZIP_ASSET}" > "${ZIP_ASSET}.sha256"

          # Upload assets
          gh release upload ${{ needs.create-release.outputs.release_tag }} "${ZIP_ASSET}" "${ZIP_ASSET}.sha256" --clobber --repo ${{ github.repository }}

      - name: Upload assets (Windows)
        if: runner.os == 'Windows'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -ex
          cd release_assets

          # Create zip archive
          ZIP_ASSET="whisper-sidecars-${{ matrix.folder }}.zip"
          zip "${ZIP_ASSET}" *

          # Create checksum
          shasum -a 256 "${ZIP_ASSET}" > "${ZIP_ASSET}.sha256"

          # Upload assets
          gh release upload ${{ needs.create-release.outputs.release_tag }} "${ZIP_ASSET}" "${ZIP_ASSET}.sha256" --clobber --repo ${{ github.repository }}
