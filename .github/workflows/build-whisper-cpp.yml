name: Build whisper.cpp Tools

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Git tag to use for the release (must already exist)'
        required: true
  workflow_call:
    inputs:
      release_tag:
        description: 'Git tag to use for the release (must already exist)'
        required: true
        type: string

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ inputs.release_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure GitHub release exists for tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = '${{ inputs.release_tag }}';
            try {
              await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag,
              });
              console.log(`Release for tag ${tag} already exists.`);
            } catch (error) {
              if (error.status === 404) {
                console.log(`Creating new release for tag ${tag}.`);
                await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: tag,
                  name: `Harvey Sidecars ${tag}`,
                  body: `Automated build of whisper.cpp tools.`, 
                  draft: false,
                  prerelease: false,
                });
              } else {
                throw error;
              }
            }

  build-and-upload:
    name: Build & Upload Binaries
    needs: create-release
    runs-on: ${{ matrix.os }}
    env:
      SDL2_DIR: "${{ github.workspace }}/SDL2-install"
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            folder: macos-x86_64
            cmake_opts: ""
          - os: macos-14
            folder: macos-arm64
            cmake_opts: "-DCMAKE_OSX_ARCHITECTURES=arm64"
          - os: windows-latest
            folder: windows-x86_64
            cmake_opts: "-G \"Unix Makefiles\""
          - os: windows-latest
            folder: windows-arm64
            cmake_opts: "-G \"Unix Makefiles\""
          - os: ubuntu-latest
            folder: linux-x86_64
            cmake_opts: ""
          - os: ubuntu-latest
            folder: linux-arm64
            cmake_opts: "-DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/whisper.cpp/cmake/toolchains/aarch64-linux-gnu.cmake"
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install prerequisites (macOS)
        if: runner.os == 'macOS'
        run: brew install cmake sdl2

      - name: Setup MSYS2 environment (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.folder == 'windows-arm64' && 'CLANGARM64' || 'CLANG64' }}
          update: true
          install: make cmake mingw-w64-clang-aarch64-toolchain mingw-w64-clang-x86_64-toolchain

      - name: Install prerequisites (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          if [[ "${{ matrix.folder }}" == "linux-arm64" ]]; then
            sudo apt-get install -y build-essential cmake curl gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libsdl2-dev-arm64-cross
          else
            sudo apt-get install -y build-essential cmake curl libsdl2-dev
          fi

      - name: Build SDL2 (Windows only)
        if: runner.os == 'Windows'
        run: |
          SDL2_VERSION="2.30.5"
          echo "Building SDL2 from source for ${{ matrix.folder }}"
          curl -sL "https://github.com/libsdl-org/SDL/releases/download/release-${SDL2_VERSION}/SDL2-${SDL2_VERSION}.tar.gz" | tar xz
          cd SDL2-${SDL2_VERSION}
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release \
                   -DCMAKE_INSTALL_PREFIX="${{ env.SDL2_DIR }}" \
                   -DSDL_STATIC=OFF \
                   -DSDL_SHARED=ON \
                   ${{ matrix.cmake_opts }}
          make -j$(nproc)
          make install
          cd ../..

      - name: Clone whisper.cpp
        run: git clone --depth 1 --branch v1.6.2 https://github.com/ggml-org/whisper.cpp.git whisper.cpp

      - name: Build whisper.cpp
        run: |
          mkdir -p whisper.cpp/build
          cd whisper.cpp/build
          
          CMAKE_FLAGS=(
            -DCMAKE_BUILD_TYPE=Release
            -DBUILD_SHARED_LIBS=OFF
            -DWHISPER_BUILD_EXAMPLES=ON
            -DWHISPER_BUILD_TESTS=OFF
            -DWHISPER_SDL2=ON
            ${{ matrix.cmake_opts }}
          )

          if [[ "${{ runner.os }}" != "macOS" ]]; then
            CMAKE_FLAGS+=(-DCMAKE_PREFIX_PATH=${{ env.SDL2_DIR }})
          fi
          
          cmake .. "${CMAKE_FLAGS[@]}"
          
          make -j$(nproc) main stream

      - name: Package Binaries
        id: package_binaries
        run: |
          echo "Packaging binaries for ${{ matrix.folder }} on ${{ matrix.os }}"
          ASSET_DIR="${{ github.workspace }}/release_assets"
          mkdir -p "${ASSET_DIR}"
          cd "${{ github.workspace }}/whisper.cpp/build/bin"

          if [[ "${{ runner.os }}" == "Windows" ]]; then
            ASSET_CLI="whisper-cli-${{ matrix.folder }}.exe"
            ASSET_STREAM="whisper-stream-${{ matrix.folder }}.exe"
            cp "${{ env.SDL2_DIR }}/bin/SDL2.dll" "${ASSET_DIR}/"
            mv main.exe "${ASSET_DIR}/${ASSET_CLI}"
            mv stream.exe "${ASSET_DIR}/${ASSET_STREAM}"
          else
            ASSET_CLI="whisper-cli-${{ matrix.folder }}"
            ASSET_STREAM="whisper-stream-${{ matrix.folder }}"
            mv main "${ASSET_DIR}/${ASSET_CLI}"
            mv stream "${ASSET_DIR}/${ASSET_STREAM}"
          fi
          
          echo "ASSET_CLI=${ASSET_CLI}" >> $GITHUB_OUTPUT
          echo "ASSET_STREAM=${ASSET_STREAM}" >> $GITHUB_OUTPUT

      - name: Upload Binaries
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd "${{ github.workspace }}/release_assets"
          echo "Uploading assets to release ${{ needs.create-release.outputs.release_tag }}"
          gh release upload ${{ needs.create-release.outputs.release_tag }} ./* --clobber