# Workflow name as displayed on GitHub Actions
name: Update Diarize-CLI Sidecar

# Permissions granted to the GITHUB_TOKEN for this workflow
permissions:
  contents: write # Allows the workflow to write to the repository (e.g., commit files)

# Triggers for the workflow
on:
  workflow_dispatch: # Enables manual triggering from the GitHub UI (adds the "Run workflow" button)
  workflow_call:     # Allows this workflow to be called by other workflows

jobs:
  build-macos-x86_64:
    runs-on: macos-latest
    env:
      HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyannote.audio huggingface_hub pyinstaller matplotlib lightning_fabric speechbrain
      - name: Log in to Hugging Face
        run: huggingface-cli login --token "$HUGGINGFACE_TOKEN"
      - name: Preload Pyannote pipeline and copy models
        run: |
          # Preload speaker diarization pipeline into cache
          python3 - << 'EOF'
          import os
          from pyannote.audio import Pipeline

          # Initialize pipeline to force model download into cache
          Pipeline.from_pretrained(
              "pyannote/speaker-diarization-3.1",
              use_auth_token=os.environ["HUGGINGFACE_TOKEN"]
          )
          EOF

          # Define Pyannote cache directory
          HF_CACHE_DIR="${HOME}/.cache/torch/pyannote"
          echo "HF_CACHE_DIR is: $HF_CACHE_DIR"
          ls -l "$HF_CACHE_DIR"
          echo "Checking individual model cache directories:"
          echo "Speaker diarization dirs:" 
          ls -d "$HF_CACHE_DIR"/models--pyannote--speaker-diarization* || echo "  None found"
          echo "Segmentation dirs:" 
          ls -d "$HF_CACHE_DIR"/models--pyannote--segmentation* || echo "  None found"
          echo "Embedding dirs:" 
          ls -d "$HF_CACHE_DIR"/models--pyannote--wespeaker-voxceleb-resnet34-LM* || echo "  None found"
          echo "Listing full ~/.cache/torch contents:"
          ls -R "${HOME}/.cache/torch"

          # Copy models to project folder using wildcard directories
          mkdir -p diarize-cli/models
          for d in "$HF_CACHE_DIR"/models--pyannote--speaker-diarization*; do
            [ -d "$d" ] && rsync -aL "$d" diarize-cli/models/
          done
          for d in "$HF_CACHE_DIR"/models--pyannote--segmentation*; do
            [ -d "$d" ] && rsync -aL "$d" diarize-cli/models/
          done
          for d in "$HF_CACHE_DIR"/models--pyannote--wespeaker-voxceleb-resnet34-LM*; do
            [ -d "$d" ] && rsync -aL "$d" diarize-cli/models/
          done

      - name: Generate Matplotlib font cache
        run: |
          python3 - << 'EOF'
          import os
          import matplotlib as mpl
          from matplotlib import font_manager as fm

          print("Attempting to rebuild Matplotlib font cache...")
          cache_dir = mpl.get_cachedir()
          print(f"Matplotlib cache directory: {cache_dir}")

          # Remove existing font list cache files to force regeneration
          for fname in ("fontList.json", "fontList.py3k.cache", "fontlist-v330.json"): # Added common cache file name
              p = os.path.join(cache_dir, fname)
              if os.path.exists(p):
                  try:
                      os.remove(p)
                      print(f"Removed existing cache file: {p}")
                  except OSError as e:
                      print(f"Error removing {p}: {e}")

          # Rebuild the font cache
          try:
              fm.findSystemFonts(fontpaths=None, fontext='ttf')
              _ = fm.fontManager # Accessing fontManager can trigger cache build
              print("Matplotlib font cache rebuilt successfully.")
          except Exception as e:
              print(f"Error rebuilding Matplotlib font cache: {e}")
          EOF

      - name: Copy Matplotlib cache to resources
        run: |
          mkdir -p diarize-cli/resources/.matplotlib
          # Get cache directory path from Python and copy its contents
          MATPLOTLIB_CACHE_DIR=$(python3 -c 'import matplotlib as mpl; print(mpl.get_cachedir())')
          if [ -d "$MATPLOTLIB_CACHE_DIR" ]; then
            echo "Copying Matplotlib cache from $MATPLOTLIB_CACHE_DIR to diarize-cli/resources/.matplotlib"
            # Using rsync for better control and error handling if available, else cp
            if command -v rsync &> /dev/null; then
              rsync -av --exclude='*.lock' "$MATPLOTLIB_CACHE_DIR/" diarize-cli/resources/.matplotlib/
            else
              cp -R "$MATPLOTLIB_CACHE_DIR/." diarize-cli/resources/.matplotlib/
            fi
          else
            echo "Matplotlib cache directory not found: $MATPLOTLIB_CACHE_DIR"
          fi

      - name: Locate Lightning-Fabric and SpeechBrain paths
        run: |
          echo "Locating Lightning-Fabric and SpeechBrain paths..."
          LIGHT_INFO_PATH=$(python3 -c "import lightning_fabric, os; print(os.path.join(os.path.dirname(lightning_fabric.__file__), 'version.info'))" 2>/dev/null)
          SPEECH_DIR_PATH=$(python3 -c "import speechbrain, os; print(os.path.dirname(speechbrain.__file__))" 2>/dev/null)

          if [ -z "$LIGHT_INFO_PATH" ] || [ ! -f "$LIGHT_INFO_PATH" ]; then
            echo "::error::Lightning-Fabric version.info not found. Please check installation."
            LIGHT_FABRIC_DIR=$(python3 -c "import lightning_fabric, os; print(os.path.dirname(lightning_fabric.__file__))" 2>/dev/null)
            echo "Lightning-Fabric directory found at: $LIGHT_FABRIC_DIR (if this is what you need to bundle, adjust --add-data)"
            LIGHT_INFO_PATH=$LIGHT_FABRIC_DIR 
          fi
          
          if [ -z "$SPEECH_DIR_PATH" ] || [ ! -d "$SPEECH_DIR_PATH" ]; then
            echo "::error::SpeechBrain directory not found. Please check installation."
            exit 1
          fi
          
          echo "LIGHT_INFO_PATH=$LIGHT_INFO_PATH"
          echo "SPEECH_DIR_PATH=$SPEECH_DIR_PATH"
          
          echo "LIGHT_INFO=$LIGHT_INFO_PATH" >> $GITHUB_ENV
          echo "SPEECH_DIR=$SPEECH_DIR_PATH" >> $GITHUB_ENV
          echo "Paths set to GITHUB_ENV."

      - name: Build with PyInstaller
        run: |
          echo "Starting PyInstaller build..."
          echo "Models path: diarize-cli/models"
          ls -R diarize-cli/models
          echo "Matplotlib cache resource path: diarize-cli/resources/.matplotlib"
          ls -R diarize-cli/resources/.matplotlib
          echo "Lightning Fabric path from env: ${LIGHT_INFO}"
          ls -R "${LIGHT_INFO}"
          echo "SpeechBrain path from env: ${SPEECH_DIR}"
          ls -R "${SPEECH_DIR}"

          pyinstaller --clean --onefile \
            --name diarize-cli \
            --add-data "diarize-cli/models:models" \
            --add-data "diarize-cli/resources/.matplotlib:resources/.matplotlib" \
            --add-data "${LIGHT_INFO}:lightning_fabric" \
            --add-data "${SPEECH_DIR}:speechbrain" \
            --hidden-import=pyannote.audio.pipelines \
            --hidden-import=pyannote.audio.models \
            --hidden-import=pyannote.audio.models.segmentation \
            --hidden-import=pyannote.audio.models.embedding \
            diarize-cli/diarize_cli.py
          echo "PyInstaller build finished."

      - name: Copy diarize-cli binary
        run: |
          mkdir -p diarize-cli/macos-x86_64
          cp dist/diarize-cli diarize-cli/macos-x86_64/diarize-cli
          chmod +x diarize-cli/macos-x86_64/diarize-cli
          echo "Copied diarize-cli to diarize-cli/macos-x86_64/"

      - name: Commit and push binary for macos-x86_64
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add diarize-cli/macos-x86_64
          git diff --cached --quiet || git commit -m "chore: update diarize-cli for macos-x86_64 [skip ci]"
          git pull --rebase --autostash origin main
          git push origin main

  build-macos-arm64:
    needs: build-macos-x86_64
    runs-on: macos-latest
    env:
      HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyannote.audio huggingface_hub pyinstaller matplotlib lightning_fabric speechbrain
      - name: Log in to Hugging Face
        run: huggingface-cli login --token "$HUGGINGFACE_TOKEN"
      - name: Preload Pyannote pipeline and copy models
        run: |
          # Preload speaker diarization pipeline into cache
          python3 - << 'EOF'
          import os
          from pyannote.audio import Pipeline

          # Initialize pipeline to force model download into cache
          Pipeline.from_pretrained(
              "pyannote/speaker-diarization-3.1",
              use_auth_token=os.environ["HUGGINGFACE_TOKEN"]
          )
          EOF

          # Define Pyannote cache directory
          HF_CACHE_DIR="${HOME}/.cache/torch/pyannote"
          echo "HF_CACHE_DIR is: $HF_CACHE_DIR"
          ls -l "$HF_CACHE_DIR"
          echo "Checking individual model cache directories:"
          echo "Speaker diarization dirs:" 
          ls -d "$HF_CACHE_DIR"/models--pyannote--speaker-diarization* || echo "  None found"
          echo "Segmentation dirs:" 
          ls -d "$HF_CACHE_DIR"/models--pyannote--segmentation* || echo "  None found"
          echo "Embedding dirs:" 
          ls -d "$HF_CACHE_DIR"/models--pyannote--wespeaker-voxceleb-resnet34-LM* || echo "  None found"
          echo "Listing full ~/.cache/torch contents:"
          ls -R "${HOME}/.cache/torch"

          # Copy models to project folder using wildcard directories
          mkdir -p diarize-cli/models
          for d in "$HF_CACHE_DIR"/models--pyannote--speaker-diarization*; do
            [ -d "$d" ] && rsync -aL "$d" diarize-cli/models/
          done
          for d in "$HF_CACHE_DIR"/models--pyannote--segmentation*; do
            [ -d "$d" ] && rsync -aL "$d" diarize-cli/models/
          done
          for d in "$HF_CACHE_DIR"/models--pyannote--wespeaker-voxceleb-resnet34-LM*; do
            [ -d "$d" ] && rsync -aL "$d" diarize-cli/models/
          done

      - name: Generate Matplotlib font cache
        run: |
          python3 - << 'EOF'
          import os
          import matplotlib as mpl
          from matplotlib import font_manager as fm

          print("Attempting to rebuild Matplotlib font cache...")
          cache_dir = mpl.get_cachedir()
          print(f"Matplotlib cache directory: {cache_dir}")

          # Remove existing font list cache files to force regeneration
          for fname in ("fontList.json", "fontList.py3k.cache", "fontlist-v330.json"):
              p = os.path.join(cache_dir, fname)
              if os.path.exists(p):
                  try:
                      os.remove(p)
                      print(f"Removed existing cache file: {p}")
                  except OSError as e:
                      print(f"Error removing {p}: {e}")

          # Rebuild the font cache
          try:
              fm.findSystemFonts(fontpaths=None, fontext='ttf')
              _ = fm.fontManager
              print("Matplotlib font cache rebuilt successfully.")
          except Exception as e:
              print(f"Error rebuilding Matplotlib font cache: {e}")
          EOF

      - name: Copy Matplotlib cache to resources
        run: |
          mkdir -p diarize-cli/resources/.matplotlib
          MATPLOTLIB_CACHE_DIR=$(python3 -c 'import matplotlib as mpl; print(mpl.get_cachedir())')
          if [ -d "$MATPLOTLIB_CACHE_DIR" ]; then
            echo "Copying Matplotlib cache from $MATPLOTLIB_CACHE_DIR to diarize-cli/resources/.matplotlib"
            if command -v rsync &> /dev/null; then
              rsync -av --exclude='*.lock' "$MATPLOTLIB_CACHE_DIR/" diarize-cli/resources/.matplotlib/
            else
              cp -R "$MATPLOTLIB_CACHE_DIR/." diarize-cli/resources/.matplotlib/
            fi
          else
            echo "Matplotlib cache directory not found: $MATPLOTLIB_CACHE_DIR"
          fi

      - name: Locate Lightning-Fabric and SpeechBrain paths
        run: |
          echo "Locating Lightning-Fabric and SpeechBrain paths..."
          LIGHT_INFO_PATH=$(python3 -c "import lightning_fabric, os; print(os.path.join(os.path.dirname(lightning_fabric.__file__), 'version.info'))" 2>/dev/null)
          SPEECH_DIR_PATH=$(python3 -c "import speechbrain, os; print(os.path.dirname(speechbrain.__file__))" 2>/dev/null)

          if [ -z "$LIGHT_INFO_PATH" ] || [ ! -f "$LIGHT_INFO_PATH" ]; then
            echo "::error::Lightning-Fabric version.info not found. Please check installation."
            LIGHT_FABRIC_DIR=$(python3 -c "import lightning_fabric, os; print(os.path.dirname(lightning_fabric.__file__))" 2>/dev/null)
            echo "Lightning-Fabric directory found at: $LIGHT_FABRIC_DIR (if this is what you need to bundle, adjust --add-data)"
            LIGHT_INFO_PATH=$LIGHT_FABRIC_DIR 
          fi
          
          if [ -z "$SPEECH_DIR_PATH" ] || [ ! -d "$SPEECH_DIR_PATH" ]; then
            echo "::error::SpeechBrain directory not found. Please check installation."
            exit 1
          fi
          
          echo "LIGHT_INFO_PATH=$LIGHT_INFO_PATH"
          echo "SPEECH_DIR_PATH=$SPEECH_DIR_PATH"
          
          echo "LIGHT_INFO=$LIGHT_INFO_PATH" >> $GITHUB_ENV
          echo "SPEECH_DIR=$SPEECH_DIR_PATH" >> $GITHUB_ENV
          echo "Paths set to GITHUB_ENV."

      - name: Build with PyInstaller
        run: |
          echo "Starting PyInstaller build..."
          echo "Models path: diarize-cli/models"
          ls -R diarize-cli/models
          echo "Matplotlib cache resource path: diarize-cli/resources/.matplotlib"
          ls -R diarize-cli/resources/.matplotlib
          echo "Lightning Fabric path from env: ${LIGHT_INFO}"
          ls -R "${LIGHT_INFO}"
          echo "SpeechBrain path from env: ${SPEECH_DIR}"
          ls -R "${SPEECH_DIR}"

          pyinstaller --clean --onefile \
            --name diarize-cli \
            --add-data "diarize-cli/models:models" \
            --add-data "diarize-cli/resources/.matplotlib:resources/.matplotlib" \
            --add-data "${LIGHT_INFO}:lightning_fabric" \
            --add-data "${SPEECH_DIR}:speechbrain" \
            --hidden-import=pyannote.audio.pipelines \
            --hidden-import=pyannote.audio.models \
            --hidden-import=pyannote.audio.models.segmentation \
            --hidden-import=pyannote.audio.models.embedding \
            diarize-cli/diarize_cli.py
          echo "PyInstaller build finished."

      - name: Copy diarize-cli binary
        run: |
          mkdir -p diarize-cli/macos-arm64
          cp dist/diarize-cli diarize-cli/macos-arm64/diarize-cli
          chmod +x diarize-cli/macos-arm64/diarize-cli
          echo "Copied diarize-cli to diarize-cli/macos-arm64/"

      - name: Commit and push binary for macos-arm64
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add diarize-cli/macos-arm64
          git diff --cached --quiet || git commit -m "chore: update diarize-cli for macos-arm64 [skip ci]"
          git pull --rebase --autostash origin main
          git push origin main

  build-windows-x86_64:
    needs: build-macos-arm64
    runs-on: windows-latest
    env:
      HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyannote.audio huggingface_hub pyinstaller matplotlib lightning_fabric speechbrain
      - name: Log in to Hugging Face
        run: huggingface-cli login --token "$HUGGINGFACE_TOKEN"
      - name: Preload Pyannote pipeline and copy models
        run: |
          # Preload speaker diarization pipeline into cache
          python3 - << 'EOF'
          import os
          from pyannote.audio import Pipeline

          # Initialize pipeline to force model download into cache
          Pipeline.from_pretrained(
              "pyannote/speaker-diarization-3.1",
              use_auth_token=os.environ["HUGGINGFACE_TOKEN"]
          )
          EOF

          # Define Pyannote cache directory
          HF_CACHE_DIR="${HOME}/.cache/torch/pyannote"
          echo "HF_CACHE_DIR is: $HF_CACHE_DIR"
          ls -l "$HF_CACHE_DIR"
          echo "Checking individual model cache directories:"
          echo "Speaker diarization dirs:" 
          ls -d "$HF_CACHE_DIR"/models--pyannote--speaker-diarization* || echo "  None found"
          echo "Segmentation dirs:" 
          ls -d "$HF_CACHE_DIR"/models--pyannote--segmentation* || echo "  None found"
          echo "Embedding dirs:" 
          ls -d "$HF_CACHE_DIR"/models--pyannote--wespeaker-voxceleb-resnet34-LM* || echo "  None found"
          echo "Listing full ~/.cache/torch contents:"
          ls -R "${HOME}/.cache/torch"

          # Copy models to project folder using wildcard directories
          mkdir -p diarize-cli/models
          if [[ "$(uname -s)" == *"MINGW"* || "$(uname -s)" == *"CYGWIN"* || "$(uname -s)" == *"MSYS"* ]]; then
            for d in "$HF_CACHE_DIR"/models--pyannote--speaker-diarization*; do
              [ -d "$d" ] && cp -LR "$d" diarize-cli/models/
            done
            for d in "$HF_CACHE_DIR"/models--pyannote--segmentation*; do
              [ -d "$d" ] && cp -LR "$d" diarize-cli/models/
            done
            for d in "$HF_CACHE_DIR"/models--pyannote--wespeaker-voxceleb-resnet34-LM*; do
              [ -d "$d" ] && cp -LR "$d" diarize-cli/models/
            done
          else
            for d in "$HF_CACHE_DIR"/models--pyannote--speaker-diarization*; do
              [ -d "$d" ] && rsync -aL "$d" diarize-cli/models/
            done
            for d in "$HF_CACHE_DIR"/models--pyannote--segmentation*; do
              [ -d "$d" ] && rsync -aL "$d" diarize-cli/models/
            done
            for d in "$HF_CACHE_DIR"/models--pyannote--wespeaker-voxceleb-resnet34-LM*; do
              [ -d "$d" ] && rsync -aL "$d" diarize-cli/models/
            done
          fi

      - name: Generate Matplotlib font cache
        run: |
          python3 - << 'EOF'
          import os
          import matplotlib as mpl
          from matplotlib import font_manager as fm

          print("Attempting to rebuild Matplotlib font cache...")
          cache_dir = mpl.get_cachedir()
          print(f"Matplotlib cache directory: {cache_dir}")

          for fname in ("fontList.json", "fontList.py3k.cache", "fontlist-v330.json"):
              p = os.path.join(cache_dir, fname)
              if os.path.exists(p):
                  try:
                      os.remove(p)
                      print(f"Removed existing cache file: {p}")
                  except OSError as e:
                      print(f"Error removing {p}: {e}")

          try:
              fm.findSystemFonts(fontpaths=None, fontext='ttf')
              _ = fm.fontManager
              print("Matplotlib font cache rebuilt successfully.")
          except Exception as e:
              print(f"Error rebuilding Matplotlib font cache: {e}")
          EOF

      - name: Copy Matplotlib cache to resources
        run: |
          mkdir -p diarize-cli/resources/.matplotlib
          MATPLOTLIB_CACHE_DIR=$(python3 -c 'import matplotlib as mpl; print(mpl.get_cachedir())')
          if [ -d "$MATPLOTLIB_CACHE_DIR" ]; then
            echo "Copying Matplotlib cache from $MATPLOTLIB_CACHE_DIR to diarize-cli/resources/.matplotlib"
            if command -v rsync &> /dev/null; then
              rsync -av --exclude='*.lock' "$MATPLOTLIB_CACHE_DIR/" diarize-cli/resources/.matplotlib/
            else
              cp -R "$MATPLOTLIB_CACHE_DIR/." diarize-cli/resources/.matplotlib/
            fi
          else
            echo "Matplotlib cache directory not found: $MATPLOTLIB_CACHE_DIR"
          fi

      - name: Locate Lightning-Fabric and SpeechBrain paths
        run: |
          echo "Locating Lightning-Fabric and SpeechBrain paths..."
          LIGHT_INFO_PATH=$(python3 -c "import lightning_fabric, os; print(os.path.join(os.path.dirname(lightning_fabric.__file__), 'version.info'))" 2>/dev/null)
          SPEECH_DIR_PATH=$(python3 -c "import speechbrain, os; print(os.path.dirname(speechbrain.__file__))" 2>/dev/null)

          if [ -z "$LIGHT_INFO_PATH" ] || [ ! -f "$LIGHT_INFO_PATH" ]; then
            echo "::error::Lightning-Fabric version.info not found. Please check installation."
            LIGHT_FABRIC_DIR=$(python3 -c "import lightning_fabric, os; print(os.path.dirname(lightning_fabric.__file__))" 2>/dev/null)
            echo "Lightning-Fabric directory found at: $LIGHT_FABRIC_DIR (if this is what you need to bundle, adjust --add-data)"
            LIGHT_INFO_PATH=$LIGHT_FABRIC_DIR 
          fi
          
          if [ -z "$SPEECH_DIR_PATH" ] || [ ! -d "$SPEECH_DIR_PATH" ]; then
            echo "::error::SpeechBrain directory not found. Please check installation."
            exit 1
          fi
          
          echo "LIGHT_INFO_PATH=$LIGHT_INFO_PATH"
          echo "SPEECH_DIR_PATH=$SPEECH_DIR_PATH"
          
          echo "LIGHT_INFO=$LIGHT_INFO_PATH" >> $GITHUB_ENV
          echo "SPEECH_DIR=$SPEECH_DIR_PATH" >> $GITHUB_ENV
          echo "Paths set to GITHUB_ENV."

      - name: Build with PyInstaller
        run: |
          echo "Starting PyInstaller build..."
          echo "Models path: diarize-cli/models"
          ls -R diarize-cli/models
          echo "Matplotlib cache resource path: diarize-cli/resources/.matplotlib"
          ls -R diarize-cli/resources/.matplotlib
          echo "Lightning Fabric path from env: ${LIGHT_INFO}"
          ls -R "${LIGHT_INFO}"
          echo "SpeechBrain path from env: ${SPEECH_DIR}"
          ls -R "${SPEECH_DIR}"

          pyinstaller --clean --onefile \
            --name diarize-cli \
            --add-data "diarize-cli/models:models" \
            --add-data "diarize-cli/resources/.matplotlib:resources/.matplotlib" \
            --add-data "${LIGHT_INFO}:lightning_fabric" \
            --add-data "${SPEECH_DIR}:speechbrain" \
            --hidden-import=pyannote.audio.pipelines \
            --hidden-import=pyannote.audio.models \
            --hidden-import=pyannote.audio.models.segmentation \
            --hidden-import=pyannote.audio.models.embedding \
            diarize-cli/diarize_cli.py
          echo "PyInstaller build finished."

      - name: Copy diarize-cli binary
        run: |
          mkdir -p diarize-cli/windows-x86_64
          cp dist/diarize-cli.exe diarize-cli/windows-x86_64/diarize-cli.exe
          chmod +x diarize-cli/windows-x86_64/diarize-cli.exe
          echo "Copied diarize-cli.exe to diarize-cli/windows-x86_64/"

      - name: Commit and push binary for windows-x86_64
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add diarize-cli/windows-x86_64
          git diff --cached --quiet || git commit -m "chore: update diarize-cli for windows-x86_64 [skip ci]"
          git pull --rebase --autostash origin main
          git push origin main