# Workflow name as displayed on GitHub Actions
name: Update Diarize-CLI Sidecar

# Permissions granted to the GITHUB_TOKEN for this workflow
permissions:
  contents: write # Allows the workflow to write to the repository (e.g., commit files)

# Triggers for the workflow
on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Git tag to use for the release (must already exist)'
        required: true
  workflow_call:

jobs:
  build-diarize-matrix:
    # Specifies the runner environment for the job
    # Uses a matrix strategy to run on different operating systems
    runs-on: ${{ matrix.os }}
    
    # Environment variables available to all steps in this job
    env:
      HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }} # Securely pass Hugging Face token
      MATRIX_FOLDER: ${{ matrix.folder }}
      RELEASE_TAG: ${{ github.event.inputs.release_tag }}
      PYTHONIOENCODING: "UTF-8" # Fix for UnicodeEncodeError on Windows
      
    strategy:
      matrix:
        include:
          - os: macos-13
            folder: macos-x86_64
          - os: macos-14
            folder: macos-arm64
          - os: windows-latest
            folder: windows-x86_64
            
    defaults:
      run:
        shell: bash # Sets the default shell for `run` steps

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true # Persist credentials for git push
          fetch-depth: 0           # Fetch all history for all branches and tags

      # Step 2: Set up Python 3.11
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Step 3: Install Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "numpy<2.0"
          pip install pyannote.audio huggingface_hub pyinstaller matplotlib lightning_fabric speechbrain

      # Step 4: Log in to Hugging Face CLI
      - name: Log in to Hugging Face
        run: hf auth login --token "$HUGGINGFACE_TOKEN"

      # Step 5: Preload Pyannote pipeline and copy models from cache
      - name: Preload Pyannote pipeline and copy models
        run: |
          # Preload speaker diarization pipeline into cache
          python3 - << 'EOF'
          import os
          from pyannote.audio import Pipeline
          Pipeline.from_pretrained(
              "pyannote/speaker-diarization-3.1",
              use_auth_token=os.environ["HUGGINGFACE_TOKEN"]
          )
          EOF

          # Define Pyannote cache directory
          HF_CACHE_DIR="${HOME}/.cache/torch/pyannote"
          echo "HF_CACHE_DIR is: $HF_CACHE_DIR"
          ls -l "$HF_CACHE_DIR"
          echo "Checking individual model cache directories:"
          ls -d "$HF_CACHE_DIR"/models--pyannote--speaker-diarization* || echo "  None found"
          ls -d "$HF_CACHE_DIR"/models--pyannote--segmentation* || echo "  None found"
          ls -d "$HF_CACHE_DIR"/models--pyannote--wespeaker-voxceleb-resnet34-LM* || echo "  None found"
          echo "Listing full ~/.cache/torch contents:"
          ls -R "${HOME}/.cache/torch"

          # Copy models to project folder
          mkdir -p diarize-cli/models
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            for d in "$HF_CACHE_DIR"/models--pyannote--*; do
              [ -d "$d" ] && cp -LR "$d" diarize-cli/models/
            done
          else
            for d in "$HF_CACHE_DIR"/models--pyannote--*; do
              [ -d "$d" ] && rsync -aL "$d" diarize-cli/models/
            done
          fi

      # Step 6: Generate Matplotlib font cache
      - name: Generate Matplotlib font cache
        run: |
          python3 - << 'EOF'
          import os, matplotlib as mpl
          from matplotlib import font_manager as fm
          # Remove stale cache files
          for fname in ("fontList.json","fontList.py3k.cache","fontlist-v330.json"):
              p = mpl.get_cachedir() + "/" + fname
              if os.path.exists(p):
                  os.remove(p)
          fm.findSystemFonts()
          _ = fm.fontManager
          EOF

      # Step 7: Copy Matplotlib cache to resources
      - name: Copy Matplotlib cache to resources
        run: |
          mkdir -p diarize-cli/resources/.matplotlib
          MATPLOTLIB_CACHE_DIR=$(python3 -c 'import matplotlib as mpl; print(mpl.get_cachedir())')
          if [ -d "$MATPLOTLIB_CACHE_DIR" ]; then
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              # Use cp on Windows Git Bash
              cp -R "$MATPLOTLIB_CACHE_DIR/" diarize-cli/resources/.matplotlib/
            else
              # Use rsync on Unix
              rsync -av --exclude='*.lock' "$MATPLOTLIB_CACHE_DIR/" diarize-cli/resources/.matplotlib/
            fi
          fi

      # Step 8: Locate Lightning-Fabric and SpeechBrain paths
      - name: Locate Lightning-Fabric and SpeechBrain paths
        run: |
          LIGHT_INFO=$(python3 -c "import lightning_fabric, os; print(os.path.dirname(lightning_fabric.__file__))")
          SPEECH_DIR=$(python3 -c "import speechbrain, os; print(os.path.dirname(speechbrain.__file__))")
          echo "LIGHT_INFO=$LIGHT_INFO" >> $GITHUB_ENV
          echo "SPEECH_DIR=$SPEECH_DIR" >> $GITHUB_ENV

      # Step 9: Build the executable with PyInstaller
      - name: Build with PyInstaller
        run: |
          pyinstaller --clean --onefile \
            --name diarize-cli \
            --add-data "diarize-cli/models:models" \
            --add-data "diarize-cli/resources/.matplotlib:resources/.matplotlib" \
            --add-data "${LIGHT_INFO}:lightning_fabric" \
            --add-data "${SPEECH_DIR}:speechbrain" \
            --hidden-import=pyannote.audio.pipelines \
            --hidden-import=pyannote.audio.models \
            --hidden-import=pyannote.audio.models.segmentation \
            --hidden-import=pyannote.audio.models.embedding \
            diarize-cli/diarize_cli.py

      # Step 10: Copy the built binary to a structured folder
      - name: Copy diarize-cli binary
        run: |
          mkdir -p diarize-cli/${{ matrix.folder }}
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp dist/diarize-cli.exe diarize-cli/${{ matrix.folder }}/diarize-cli.exe
            chmod +x diarize-cli/${{ matrix.folder }}/diarize-cli.exe
          else
            cp dist/diarize-cli diarize-cli/${{ matrix.folder }}/diarize-cli
            chmod +x diarize-cli/${{ matrix.folder }}/diarize-cli
          fi

      # Step 11: Ensure GitHub release exists (create if missing)
      - name: Ensure GitHub release
        id: ensure_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const tag = process.env.RELEASE_TAG;
            try {
              const rel = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag
              });
              console.log(`Found existing release for tag ${tag}`);
              return rel.data.upload_url;
            } catch (e) {
              if (e.status === 404) {
                console.warn(`Release ${tag} not found, creating it.`);
                const rel = await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: tag,
                  name: `diarize-cli Sidecars ${tag}`,
                  body: `Automated build of diarize-cli sidecars. Release tag: ${tag}. Commit: ${context.sha}`,
                  draft: false,
                  prerelease: false
                });
                console.log(`Created new release for tag ${tag}`);
                return rel.data.upload_url;
              } else {
                console.error(`Error checking release: ${e.message}`);
                throw e;
              }
            }

      # Step 12: Upload assets
      - name: Upload assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd diarize-cli/${{ matrix.folder }}
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            BINARY_NAME="diarize-cli.exe"
            ASSET_NAME="diarize-cli-${{ matrix.folder }}.exe"
            sha256sum $BINARY_NAME | sed "s/$BINARY_NAME/$ASSET_NAME/" > ${ASSET_NAME}.sha256
            gh release upload ${{ github.event.inputs.release_tag }} ${BINARY_NAME}#${ASSET_NAME} --clobber
            gh release upload ${{ github.event.inputs.release_tag }} ${ASSET_NAME}.sha256 --clobber
          else
            BINARY_NAME="diarize-cli"
            ASSET_NAME="diarize-cli-${{ matrix.folder }}"
            shasum -a 256 $BINARY_NAME | sed "s/$BINARY_NAME/$ASSET_NAME/" > ${ASSET_NAME}.sha256
            gh release upload ${{ github.event.inputs.release_tag }} ${BINARY_NAME}#${ASSET_NAME} --clobber
            gh release upload ${{ github.event.inputs.release_tag }} ${ASSET_NAME}.sha256 --clobber
          fi
